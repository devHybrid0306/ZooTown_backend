type AggregatePlan {
  count: Int!
}

type Plan {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Int
  description: String
  category: Int
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  name: String!
  price: Int
  description: String
  category: Int
}

input PlanCreateOneInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
}

type PlanPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Int
  description: String
  category: Int
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

input PlanUpdateDataInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateManyMutationInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateOneInput {
  create: PlanCreateInput
  update: PlanUpdateDataInput
  upsert: PlanUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PlanWhereUniqueInput
}

input PlanUpsertNestedInput {
  update: PlanUpdateDataInput!
  create: PlanCreateInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: Int
  category_not: Int
  category_in: [Int!]
  category_not_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_gt: Int
  category_gte: Int
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
}