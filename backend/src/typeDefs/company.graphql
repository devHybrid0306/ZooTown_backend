type AggregateCompany {
  count: Int!
}

type Company {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String
  logo: String
  how_hear: String
  name: String!
  recruiters(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  address: String
  logo: String
  how_hear: String
  name: String!
  recruiters: UserCreateManyWithoutCompanyInput
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutRecruitersInput {
  create: CompanyCreateWithoutRecruitersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutRecruitersInput {
  id: ID
  address: String
  logo: String
  how_hear: String
  name: String!
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  address_ASC
  address_DESC
  logo_ASC
  logo_DESC
  how_hear_ASC
  how_hear_DESC
  name_ASC
  name_DESC
}

type CompanyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String
  logo: String
  how_hear: String
  name: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateDataInput {
  address: String
  logo: String
  how_hear: String
  name: String
  recruiters: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateInput {
  address: String
  logo: String
  how_hear: String
  name: String
  recruiters: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  address: String
  logo: String
  how_hear: String
  name: String
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutRecruitersInput {
  create: CompanyCreateWithoutRecruitersInput
  update: CompanyUpdateWithoutRecruitersDataInput
  upsert: CompanyUpsertWithoutRecruitersInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutRecruitersDataInput {
  address: String
  logo: String
  how_hear: String
  name: String
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyUpsertWithoutRecruitersInput {
  update: CompanyUpdateWithoutRecruitersDataInput!
  create: CompanyCreateWithoutRecruitersInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  how_hear: String
  how_hear_not: String
  how_hear_in: [String!]
  how_hear_not_in: [String!]
  how_hear_lt: String
  how_hear_lte: String
  how_hear_gt: String
  how_hear_gte: String
  how_hear_contains: String
  how_hear_not_contains: String
  how_hear_starts_with: String
  how_hear_not_starts_with: String
  how_hear_ends_with: String
  how_hear_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  recruiters_every: UserWhereInput
  recruiters_some: UserWhereInput
  recruiters_none: UserWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}