module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCompany {
  count: Int!
}

type AggregateCvDoctor {
  count: Int!
}

type AggregateCvDoctorReply {
  count: Int!
}

type AggregateCvFile {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateJobApplication {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePlan {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectApplication {
  count: Int!
}

type AggregateSavedJob {
  count: Int!
}

type AggregateSavedProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String
  logo: String
  how_hear: String
  name: String!
  recruiters(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  address: String
  logo: String
  how_hear: String
  name: String!
  recruiters: UserCreateManyWithoutCompanyInput
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutRecruitersInput {
  create: CompanyCreateWithoutRecruitersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutRecruitersInput {
  id: ID
  address: String
  logo: String
  how_hear: String
  name: String!
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  address_ASC
  address_DESC
  logo_ASC
  logo_DESC
  how_hear_ASC
  how_hear_DESC
  name_ASC
  name_DESC
}

type CompanyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String
  logo: String
  how_hear: String
  name: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateDataInput {
  address: String
  logo: String
  how_hear: String
  name: String
  recruiters: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateInput {
  address: String
  logo: String
  how_hear: String
  name: String
  recruiters: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  address: String
  logo: String
  how_hear: String
  name: String
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutRecruitersInput {
  create: CompanyCreateWithoutRecruitersInput
  update: CompanyUpdateWithoutRecruitersDataInput
  upsert: CompanyUpsertWithoutRecruitersInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutRecruitersDataInput {
  address: String
  logo: String
  how_hear: String
  name: String
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyUpsertWithoutRecruitersInput {
  update: CompanyUpdateWithoutRecruitersDataInput!
  create: CompanyCreateWithoutRecruitersInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  how_hear: String
  how_hear_not: String
  how_hear_in: [String!]
  how_hear_not_in: [String!]
  how_hear_lt: String
  how_hear_lte: String
  how_hear_gt: String
  how_hear_gte: String
  how_hear_contains: String
  how_hear_not_contains: String
  how_hear_starts_with: String
  how_hear_not_starts_with: String
  how_hear_ends_with: String
  how_hear_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  recruiters_every: UserWhereInput
  recruiters_some: UserWhereInput
  recruiters_none: UserWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

type CvDoctor {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  attachments(where: CvFileWhereInput, orderBy: CvFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CvFile!]
  user_id: String
  user: User
}

type CvDoctorConnection {
  pageInfo: PageInfo!
  edges: [CvDoctorEdge]!
  aggregate: AggregateCvDoctor!
}

input CvDoctorCreateInput {
  id: ID
  attachments: CvFileCreateManyInput
  user_id: String
  user: UserCreateOneInput
}

input CvDoctorCreateOneInput {
  create: CvDoctorCreateInput
  connect: CvDoctorWhereUniqueInput
}

type CvDoctorEdge {
  node: CvDoctor!
  cursor: String!
}

enum CvDoctorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  user_id_ASC
  user_id_DESC
}

type CvDoctorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user_id: String
}

type CvDoctorReply {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  attachments(where: CvFileWhereInput, orderBy: CvFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CvFile!]
  request: CvDoctor
  request_id: String!
  postedBy_id: String
  postedBy: User
}

type CvDoctorReplyConnection {
  pageInfo: PageInfo!
  edges: [CvDoctorReplyEdge]!
  aggregate: AggregateCvDoctorReply!
}

input CvDoctorReplyCreateInput {
  id: ID
  attachments: CvFileCreateManyInput
  request: CvDoctorCreateOneInput
  request_id: String!
  postedBy_id: String
  postedBy: UserCreateOneInput
}

type CvDoctorReplyEdge {
  node: CvDoctorReply!
  cursor: String!
}

enum CvDoctorReplyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  request_id_ASC
  request_id_DESC
  postedBy_id_ASC
  postedBy_id_DESC
}

type CvDoctorReplyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  request_id: String!
  postedBy_id: String
}

type CvDoctorReplySubscriptionPayload {
  mutation: MutationType!
  node: CvDoctorReply
  updatedFields: [String!]
  previousValues: CvDoctorReplyPreviousValues
}

input CvDoctorReplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CvDoctorReplyWhereInput
  AND: [CvDoctorReplySubscriptionWhereInput!]
  OR: [CvDoctorReplySubscriptionWhereInput!]
  NOT: [CvDoctorReplySubscriptionWhereInput!]
}

input CvDoctorReplyUpdateInput {
  attachments: CvFileUpdateManyInput
  request: CvDoctorUpdateOneInput
  request_id: String
  postedBy_id: String
  postedBy: UserUpdateOneInput
}

input CvDoctorReplyUpdateManyMutationInput {
  request_id: String
  postedBy_id: String
}

input CvDoctorReplyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  attachments_every: CvFileWhereInput
  attachments_some: CvFileWhereInput
  attachments_none: CvFileWhereInput
  request: CvDoctorWhereInput
  request_id: String
  request_id_not: String
  request_id_in: [String!]
  request_id_not_in: [String!]
  request_id_lt: String
  request_id_lte: String
  request_id_gt: String
  request_id_gte: String
  request_id_contains: String
  request_id_not_contains: String
  request_id_starts_with: String
  request_id_not_starts_with: String
  request_id_ends_with: String
  request_id_not_ends_with: String
  postedBy_id: String
  postedBy_id_not: String
  postedBy_id_in: [String!]
  postedBy_id_not_in: [String!]
  postedBy_id_lt: String
  postedBy_id_lte: String
  postedBy_id_gt: String
  postedBy_id_gte: String
  postedBy_id_contains: String
  postedBy_id_not_contains: String
  postedBy_id_starts_with: String
  postedBy_id_not_starts_with: String
  postedBy_id_ends_with: String
  postedBy_id_not_ends_with: String
  postedBy: UserWhereInput
  AND: [CvDoctorReplyWhereInput!]
  OR: [CvDoctorReplyWhereInput!]
  NOT: [CvDoctorReplyWhereInput!]
}

input CvDoctorReplyWhereUniqueInput {
  id: ID
}

type CvDoctorSubscriptionPayload {
  mutation: MutationType!
  node: CvDoctor
  updatedFields: [String!]
  previousValues: CvDoctorPreviousValues
}

input CvDoctorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CvDoctorWhereInput
  AND: [CvDoctorSubscriptionWhereInput!]
  OR: [CvDoctorSubscriptionWhereInput!]
  NOT: [CvDoctorSubscriptionWhereInput!]
}

input CvDoctorUpdateDataInput {
  attachments: CvFileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
}

input CvDoctorUpdateInput {
  attachments: CvFileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
}

input CvDoctorUpdateManyMutationInput {
  user_id: String
}

input CvDoctorUpdateOneInput {
  create: CvDoctorCreateInput
  update: CvDoctorUpdateDataInput
  upsert: CvDoctorUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CvDoctorWhereUniqueInput
}

input CvDoctorUpsertNestedInput {
  update: CvDoctorUpdateDataInput!
  create: CvDoctorCreateInput!
}

input CvDoctorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  attachments_every: CvFileWhereInput
  attachments_some: CvFileWhereInput
  attachments_none: CvFileWhereInput
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  user: UserWhereInput
  AND: [CvDoctorWhereInput!]
  OR: [CvDoctorWhereInput!]
  NOT: [CvDoctorWhereInput!]
}

input CvDoctorWhereUniqueInput {
  id: ID
}

type CvFile {
  id: ID!
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type CvFileConnection {
  pageInfo: PageInfo!
  edges: [CvFileEdge]!
  aggregate: AggregateCvFile!
}

input CvFileCreateInput {
  id: ID
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

input CvFileCreateManyInput {
  create: [CvFileCreateInput!]
  connect: [CvFileWhereUniqueInput!]
}

type CvFileEdge {
  node: CvFile!
  cursor: String!
}

enum CvFileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type CvFilePreviousValues {
  id: ID!
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

input CvFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [CvFileScalarWhereInput!]
  OR: [CvFileScalarWhereInput!]
  NOT: [CvFileScalarWhereInput!]
}

type CvFileSubscriptionPayload {
  mutation: MutationType!
  node: CvFile
  updatedFields: [String!]
  previousValues: CvFilePreviousValues
}

input CvFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CvFileWhereInput
  AND: [CvFileSubscriptionWhereInput!]
  OR: [CvFileSubscriptionWhereInput!]
  NOT: [CvFileSubscriptionWhereInput!]
}

input CvFileUpdateDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input CvFileUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input CvFileUpdateManyDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input CvFileUpdateManyInput {
  create: [CvFileCreateInput!]
  update: [CvFileUpdateWithWhereUniqueNestedInput!]
  upsert: [CvFileUpsertWithWhereUniqueNestedInput!]
  delete: [CvFileWhereUniqueInput!]
  connect: [CvFileWhereUniqueInput!]
  set: [CvFileWhereUniqueInput!]
  disconnect: [CvFileWhereUniqueInput!]
  deleteMany: [CvFileScalarWhereInput!]
  updateMany: [CvFileUpdateManyWithWhereNestedInput!]
}

input CvFileUpdateManyMutationInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input CvFileUpdateManyWithWhereNestedInput {
  where: CvFileScalarWhereInput!
  data: CvFileUpdateManyDataInput!
}

input CvFileUpdateWithWhereUniqueNestedInput {
  where: CvFileWhereUniqueInput!
  data: CvFileUpdateDataInput!
}

input CvFileUpsertWithWhereUniqueNestedInput {
  where: CvFileWhereUniqueInput!
  update: CvFileUpdateDataInput!
  create: CvFileCreateInput!
}

input CvFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [CvFileWhereInput!]
  OR: [CvFileWhereInput!]
  NOT: [CvFileWhereInput!]
}

input CvFileWhereUniqueInput {
  id: ID
  url: String
}

scalar DateTime

type File {
  id: ID!
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  name: String
  size: Int
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyMutationInput {
  name: String
  size: Int
  secret: String
  contentType: String
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateOneInput {
  create: FileCreateInput
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FileWhereUniqueInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
  url: String
}

type Job {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy_id: String!
  company_id: String!
  postedBy: User
  company: Company
  title: String!
  description: String
  short_description: String
  employment_type: String!
  type: String
  location: String
  salary: Float
  applications(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplication!]
  attachments(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  requirements: Json
}

type JobApplication {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  proposal: String
  attachments(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  user_id: String!
  user: User
}

type JobApplicationConnection {
  pageInfo: PageInfo!
  edges: [JobApplicationEdge]!
  aggregate: AggregateJobApplication!
}

input JobApplicationCreateInput {
  id: ID
  title: String!
  proposal: String
  attachments: FileCreateManyInput
  user_id: String!
  user: UserCreateOneInput
}

input JobApplicationCreateManyInput {
  create: [JobApplicationCreateInput!]
  connect: [JobApplicationWhereUniqueInput!]
}

type JobApplicationEdge {
  node: JobApplication!
  cursor: String!
}

enum JobApplicationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  proposal_ASC
  proposal_DESC
  user_id_ASC
  user_id_DESC
}

type JobApplicationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  proposal: String
  user_id: String!
}

input JobApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  proposal: String
  proposal_not: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_lt: String
  proposal_lte: String
  proposal_gt: String
  proposal_gte: String
  proposal_contains: String
  proposal_not_contains: String
  proposal_starts_with: String
  proposal_not_starts_with: String
  proposal_ends_with: String
  proposal_not_ends_with: String
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  AND: [JobApplicationScalarWhereInput!]
  OR: [JobApplicationScalarWhereInput!]
  NOT: [JobApplicationScalarWhereInput!]
}

type JobApplicationSubscriptionPayload {
  mutation: MutationType!
  node: JobApplication
  updatedFields: [String!]
  previousValues: JobApplicationPreviousValues
}

input JobApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobApplicationWhereInput
  AND: [JobApplicationSubscriptionWhereInput!]
  OR: [JobApplicationSubscriptionWhereInput!]
  NOT: [JobApplicationSubscriptionWhereInput!]
}

input JobApplicationUpdateDataInput {
  title: String
  proposal: String
  attachments: FileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
}

input JobApplicationUpdateInput {
  title: String
  proposal: String
  attachments: FileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
}

input JobApplicationUpdateManyDataInput {
  title: String
  proposal: String
  user_id: String
}

input JobApplicationUpdateManyInput {
  create: [JobApplicationCreateInput!]
  update: [JobApplicationUpdateWithWhereUniqueNestedInput!]
  upsert: [JobApplicationUpsertWithWhereUniqueNestedInput!]
  delete: [JobApplicationWhereUniqueInput!]
  connect: [JobApplicationWhereUniqueInput!]
  set: [JobApplicationWhereUniqueInput!]
  disconnect: [JobApplicationWhereUniqueInput!]
  deleteMany: [JobApplicationScalarWhereInput!]
  updateMany: [JobApplicationUpdateManyWithWhereNestedInput!]
}

input JobApplicationUpdateManyMutationInput {
  title: String
  proposal: String
  user_id: String
}

input JobApplicationUpdateManyWithWhereNestedInput {
  where: JobApplicationScalarWhereInput!
  data: JobApplicationUpdateManyDataInput!
}

input JobApplicationUpdateWithWhereUniqueNestedInput {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateDataInput!
}

input JobApplicationUpsertWithWhereUniqueNestedInput {
  where: JobApplicationWhereUniqueInput!
  update: JobApplicationUpdateDataInput!
  create: JobApplicationCreateInput!
}

input JobApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  proposal: String
  proposal_not: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_lt: String
  proposal_lte: String
  proposal_gt: String
  proposal_gte: String
  proposal_contains: String
  proposal_not_contains: String
  proposal_starts_with: String
  proposal_not_starts_with: String
  proposal_ends_with: String
  proposal_not_ends_with: String
  attachments_every: FileWhereInput
  attachments_some: FileWhereInput
  attachments_none: FileWhereInput
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  user: UserWhereInput
  AND: [JobApplicationWhereInput!]
  OR: [JobApplicationWhereInput!]
  NOT: [JobApplicationWhereInput!]
}

input JobApplicationWhereUniqueInput {
  id: ID
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  id: ID
  postedBy_id: String!
  company_id: String!
  postedBy: UserCreateOneInput
  company: CompanyCreateOneInput
  title: String!
  description: String
  short_description: String
  employment_type: String!
  type: String
  location: String
  salary: Float
  applications: JobApplicationCreateManyInput
  attachments: FileCreateManyInput
  requirements: Json
}

input JobCreateOneInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  postedBy_id_ASC
  postedBy_id_DESC
  company_id_ASC
  company_id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  short_description_ASC
  short_description_DESC
  employment_type_ASC
  employment_type_DESC
  type_ASC
  type_DESC
  location_ASC
  location_DESC
  salary_ASC
  salary_DESC
  requirements_ASC
  requirements_DESC
}

type JobPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy_id: String!
  company_id: String!
  title: String!
  description: String
  short_description: String
  employment_type: String!
  type: String
  location: String
  salary: Float
  requirements: Json
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateDataInput {
  postedBy_id: String
  company_id: String
  postedBy: UserUpdateOneInput
  company: CompanyUpdateOneInput
  title: String
  description: String
  short_description: String
  employment_type: String
  type: String
  location: String
  salary: Float
  applications: JobApplicationUpdateManyInput
  attachments: FileUpdateManyInput
  requirements: Json
}

input JobUpdateInput {
  postedBy_id: String
  company_id: String
  postedBy: UserUpdateOneInput
  company: CompanyUpdateOneInput
  title: String
  description: String
  short_description: String
  employment_type: String
  type: String
  location: String
  salary: Float
  applications: JobApplicationUpdateManyInput
  attachments: FileUpdateManyInput
  requirements: Json
}

input JobUpdateManyMutationInput {
  postedBy_id: String
  company_id: String
  title: String
  description: String
  short_description: String
  employment_type: String
  type: String
  location: String
  salary: Float
  requirements: Json
}

input JobUpdateOneInput {
  create: JobCreateInput
  update: JobUpdateDataInput
  upsert: JobUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: JobWhereUniqueInput
}

input JobUpdateOneRequiredInput {
  create: JobCreateInput
  update: JobUpdateDataInput
  upsert: JobUpsertNestedInput
  connect: JobWhereUniqueInput
}

input JobUpsertNestedInput {
  update: JobUpdateDataInput!
  create: JobCreateInput!
}

input JobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy_id: String
  postedBy_id_not: String
  postedBy_id_in: [String!]
  postedBy_id_not_in: [String!]
  postedBy_id_lt: String
  postedBy_id_lte: String
  postedBy_id_gt: String
  postedBy_id_gte: String
  postedBy_id_contains: String
  postedBy_id_not_contains: String
  postedBy_id_starts_with: String
  postedBy_id_not_starts_with: String
  postedBy_id_ends_with: String
  postedBy_id_not_ends_with: String
  company_id: String
  company_id_not: String
  company_id_in: [String!]
  company_id_not_in: [String!]
  company_id_lt: String
  company_id_lte: String
  company_id_gt: String
  company_id_gte: String
  company_id_contains: String
  company_id_not_contains: String
  company_id_starts_with: String
  company_id_not_starts_with: String
  company_id_ends_with: String
  company_id_not_ends_with: String
  postedBy: UserWhereInput
  company: CompanyWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  short_description: String
  short_description_not: String
  short_description_in: [String!]
  short_description_not_in: [String!]
  short_description_lt: String
  short_description_lte: String
  short_description_gt: String
  short_description_gte: String
  short_description_contains: String
  short_description_not_contains: String
  short_description_starts_with: String
  short_description_not_starts_with: String
  short_description_ends_with: String
  short_description_not_ends_with: String
  employment_type: String
  employment_type_not: String
  employment_type_in: [String!]
  employment_type_not_in: [String!]
  employment_type_lt: String
  employment_type_lte: String
  employment_type_gt: String
  employment_type_gte: String
  employment_type_contains: String
  employment_type_not_contains: String
  employment_type_starts_with: String
  employment_type_not_starts_with: String
  employment_type_ends_with: String
  employment_type_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  salary: Float
  salary_not: Float
  salary_in: [Float!]
  salary_not_in: [Float!]
  salary_lt: Float
  salary_lte: Float
  salary_gt: Float
  salary_gte: Float
  applications_every: JobApplicationWhereInput
  applications_some: JobApplicationWhereInput
  applications_none: JobApplicationWhereInput
  attachments_every: FileWhereInput
  attachments_some: FileWhereInput
  attachments_none: FileWhereInput
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  from: User!
  to: User!
  deliveredAt: DateTime
  readAt: DateTime
  project: Project
  job: Job
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  from: UserCreateOneInput!
  to: UserCreateOneInput!
  deliveredAt: DateTime
  readAt: DateTime
  project: ProjectCreateOneInput
  job: JobCreateOneInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  readAt_ASC
  readAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  deliveredAt: DateTime
  readAt: DateTime
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
  deliveredAt: DateTime
  readAt: DateTime
  project: ProjectUpdateOneInput
  job: JobUpdateOneInput
}

input MessageUpdateManyMutationInput {
  deliveredAt: DateTime
  readAt: DateTime
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  from: UserWhereInput
  to: UserWhereInput
  deliveredAt: DateTime
  deliveredAt_not: DateTime
  deliveredAt_in: [DateTime!]
  deliveredAt_not_in: [DateTime!]
  deliveredAt_lt: DateTime
  deliveredAt_lte: DateTime
  deliveredAt_gt: DateTime
  deliveredAt_gte: DateTime
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  project: ProjectWhereInput
  job: JobWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createCvDoctor(data: CvDoctorCreateInput!): CvDoctor!
  updateCvDoctor(data: CvDoctorUpdateInput!, where: CvDoctorWhereUniqueInput!): CvDoctor
  updateManyCvDoctors(data: CvDoctorUpdateManyMutationInput!, where: CvDoctorWhereInput): BatchPayload!
  upsertCvDoctor(where: CvDoctorWhereUniqueInput!, create: CvDoctorCreateInput!, update: CvDoctorUpdateInput!): CvDoctor!
  deleteCvDoctor(where: CvDoctorWhereUniqueInput!): CvDoctor
  deleteManyCvDoctors(where: CvDoctorWhereInput): BatchPayload!
  createCvDoctorReply(data: CvDoctorReplyCreateInput!): CvDoctorReply!
  updateCvDoctorReply(data: CvDoctorReplyUpdateInput!, where: CvDoctorReplyWhereUniqueInput!): CvDoctorReply
  updateManyCvDoctorReplies(data: CvDoctorReplyUpdateManyMutationInput!, where: CvDoctorReplyWhereInput): BatchPayload!
  upsertCvDoctorReply(where: CvDoctorReplyWhereUniqueInput!, create: CvDoctorReplyCreateInput!, update: CvDoctorReplyUpdateInput!): CvDoctorReply!
  deleteCvDoctorReply(where: CvDoctorReplyWhereUniqueInput!): CvDoctorReply
  deleteManyCvDoctorReplies(where: CvDoctorReplyWhereInput): BatchPayload!
  createCvFile(data: CvFileCreateInput!): CvFile!
  updateCvFile(data: CvFileUpdateInput!, where: CvFileWhereUniqueInput!): CvFile
  updateManyCvFiles(data: CvFileUpdateManyMutationInput!, where: CvFileWhereInput): BatchPayload!
  upsertCvFile(where: CvFileWhereUniqueInput!, create: CvFileCreateInput!, update: CvFileUpdateInput!): CvFile!
  deleteCvFile(where: CvFileWhereUniqueInput!): CvFile
  deleteManyCvFiles(where: CvFileWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createJobApplication(data: JobApplicationCreateInput!): JobApplication!
  updateJobApplication(data: JobApplicationUpdateInput!, where: JobApplicationWhereUniqueInput!): JobApplication
  updateManyJobApplications(data: JobApplicationUpdateManyMutationInput!, where: JobApplicationWhereInput): BatchPayload!
  upsertJobApplication(where: JobApplicationWhereUniqueInput!, create: JobApplicationCreateInput!, update: JobApplicationUpdateInput!): JobApplication!
  deleteJobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  deleteManyJobApplications(where: JobApplicationWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPlan(data: PlanCreateInput!): Plan!
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectApplication(data: ProjectApplicationCreateInput!): ProjectApplication!
  updateProjectApplication(data: ProjectApplicationUpdateInput!, where: ProjectApplicationWhereUniqueInput!): ProjectApplication
  updateManyProjectApplications(data: ProjectApplicationUpdateManyMutationInput!, where: ProjectApplicationWhereInput): BatchPayload!
  upsertProjectApplication(where: ProjectApplicationWhereUniqueInput!, create: ProjectApplicationCreateInput!, update: ProjectApplicationUpdateInput!): ProjectApplication!
  deleteProjectApplication(where: ProjectApplicationWhereUniqueInput!): ProjectApplication
  deleteManyProjectApplications(where: ProjectApplicationWhereInput): BatchPayload!
  createSavedJob(data: SavedJobCreateInput!): SavedJob!
  updateSavedJob(data: SavedJobUpdateInput!, where: SavedJobWhereUniqueInput!): SavedJob
  updateManySavedJobs(data: SavedJobUpdateManyMutationInput!, where: SavedJobWhereInput): BatchPayload!
  upsertSavedJob(where: SavedJobWhereUniqueInput!, create: SavedJobCreateInput!, update: SavedJobUpdateInput!): SavedJob!
  deleteSavedJob(where: SavedJobWhereUniqueInput!): SavedJob
  deleteManySavedJobs(where: SavedJobWhereInput): BatchPayload!
  createSavedProject(data: SavedProjectCreateInput!): SavedProject!
  updateSavedProject(data: SavedProjectUpdateInput!, where: SavedProjectWhereUniqueInput!): SavedProject
  updateManySavedProjects(data: SavedProjectUpdateManyMutationInput!, where: SavedProjectWhereInput): BatchPayload!
  upsertSavedProject(where: SavedProjectWhereUniqueInput!, create: SavedProjectCreateInput!, update: SavedProjectUpdateInput!): SavedProject!
  deleteSavedProject(where: SavedProjectWhereUniqueInput!): SavedProject
  deleteManySavedProjects(where: SavedProjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  user: User
  link: String
  readDate: DateTime
}

enum NOTIFICATION_TYPE {
  FOLLOWED
  JOB_INVITE
  PROJECT_INVITE
  NEW_MESSAGE
  REVIEW
  ACCOUNT_ACTIVITY
  JOB_APPLIED
  PROJECT_APPLIED
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  type: NOTIFICATION_TYPE
  user: UserCreateOneWithoutNotificationsInput
  link: String
  readDate: DateTime
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  id: ID
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  link_ASC
  link_DESC
  readDate_ASC
  readDate_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: NOTIFICATION_TYPE
  type_not: NOTIFICATION_TYPE
  type_in: [NOTIFICATION_TYPE!]
  type_not_in: [NOTIFICATION_TYPE!]
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  readDate: DateTime
  readDate_not: DateTime
  readDate_in: [DateTime!]
  readDate_not_in: [DateTime!]
  readDate_lt: DateTime
  readDate_lte: DateTime
  readDate_gt: DateTime
  readDate_gte: DateTime
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  type: NOTIFICATION_TYPE
  user: UserUpdateOneWithoutNotificationsInput
  link: String
  readDate: DateTime
}

input NotificationUpdateManyDataInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateManyMutationInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutUserDataInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: NOTIFICATION_TYPE
  type_not: NOTIFICATION_TYPE
  type_in: [NOTIFICATION_TYPE!]
  type_not_in: [NOTIFICATION_TYPE!]
  user: UserWhereInput
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  readDate: DateTime
  readDate_not: DateTime
  readDate_in: [DateTime!]
  readDate_not_in: [DateTime!]
  readDate_lt: DateTime
  readDate_lte: DateTime
  readDate_gt: DateTime
  readDate_gte: DateTime
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Plan {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Int
  description: String
  category: Int!
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  id: ID
  name: String!
  price: Int
  description: String
  category: Int!
}

input PlanCreateOneInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
}

type PlanPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Int
  description: String
  category: Int!
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

input PlanUpdateDataInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateManyMutationInput {
  name: String
  price: Int
  description: String
  category: Int
}

input PlanUpdateOneInput {
  create: PlanCreateInput
  update: PlanUpdateDataInput
  upsert: PlanUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PlanWhereUniqueInput
}

input PlanUpsertNestedInput {
  update: PlanUpdateDataInput!
  create: PlanCreateInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: Int
  category_not: Int
  category_in: [Int!]
  category_not_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_gt: Int
  category_gte: Int
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  published: Boolean
  title: String!
  content: String
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  published: Boolean
  title: String!
  content: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy_id: String!
  company_id: String!
  postedBy: User
  company: Company
  title: String!
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  attachments(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  requirements: Json
  applications(where: ProjectApplicationWhereInput, orderBy: ProjectApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectApplication!]
}

type ProjectApplication {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  proposal: String
  attachments(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  user_id: String!
  user: User
  proposed_budget: Float
  proposed_duration: String
}

type ProjectApplicationConnection {
  pageInfo: PageInfo!
  edges: [ProjectApplicationEdge]!
  aggregate: AggregateProjectApplication!
}

input ProjectApplicationCreateInput {
  id: ID
  title: String!
  proposal: String
  attachments: FileCreateManyInput
  user_id: String!
  user: UserCreateOneInput
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationCreateManyInput {
  create: [ProjectApplicationCreateInput!]
  connect: [ProjectApplicationWhereUniqueInput!]
}

type ProjectApplicationEdge {
  node: ProjectApplication!
  cursor: String!
}

enum ProjectApplicationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  proposal_ASC
  proposal_DESC
  user_id_ASC
  user_id_DESC
  proposed_budget_ASC
  proposed_budget_DESC
  proposed_duration_ASC
  proposed_duration_DESC
}

type ProjectApplicationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  proposal: String
  user_id: String!
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  proposal: String
  proposal_not: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_lt: String
  proposal_lte: String
  proposal_gt: String
  proposal_gte: String
  proposal_contains: String
  proposal_not_contains: String
  proposal_starts_with: String
  proposal_not_starts_with: String
  proposal_ends_with: String
  proposal_not_ends_with: String
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  proposed_budget: Float
  proposed_budget_not: Float
  proposed_budget_in: [Float!]
  proposed_budget_not_in: [Float!]
  proposed_budget_lt: Float
  proposed_budget_lte: Float
  proposed_budget_gt: Float
  proposed_budget_gte: Float
  proposed_duration: String
  proposed_duration_not: String
  proposed_duration_in: [String!]
  proposed_duration_not_in: [String!]
  proposed_duration_lt: String
  proposed_duration_lte: String
  proposed_duration_gt: String
  proposed_duration_gte: String
  proposed_duration_contains: String
  proposed_duration_not_contains: String
  proposed_duration_starts_with: String
  proposed_duration_not_starts_with: String
  proposed_duration_ends_with: String
  proposed_duration_not_ends_with: String
  AND: [ProjectApplicationScalarWhereInput!]
  OR: [ProjectApplicationScalarWhereInput!]
  NOT: [ProjectApplicationScalarWhereInput!]
}

type ProjectApplicationSubscriptionPayload {
  mutation: MutationType!
  node: ProjectApplication
  updatedFields: [String!]
  previousValues: ProjectApplicationPreviousValues
}

input ProjectApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectApplicationWhereInput
  AND: [ProjectApplicationSubscriptionWhereInput!]
  OR: [ProjectApplicationSubscriptionWhereInput!]
  NOT: [ProjectApplicationSubscriptionWhereInput!]
}

input ProjectApplicationUpdateDataInput {
  title: String
  proposal: String
  attachments: FileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationUpdateInput {
  title: String
  proposal: String
  attachments: FileUpdateManyInput
  user_id: String
  user: UserUpdateOneInput
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationUpdateManyDataInput {
  title: String
  proposal: String
  user_id: String
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationUpdateManyInput {
  create: [ProjectApplicationCreateInput!]
  update: [ProjectApplicationUpdateWithWhereUniqueNestedInput!]
  upsert: [ProjectApplicationUpsertWithWhereUniqueNestedInput!]
  delete: [ProjectApplicationWhereUniqueInput!]
  connect: [ProjectApplicationWhereUniqueInput!]
  set: [ProjectApplicationWhereUniqueInput!]
  disconnect: [ProjectApplicationWhereUniqueInput!]
  deleteMany: [ProjectApplicationScalarWhereInput!]
  updateMany: [ProjectApplicationUpdateManyWithWhereNestedInput!]
}

input ProjectApplicationUpdateManyMutationInput {
  title: String
  proposal: String
  user_id: String
  proposed_budget: Float
  proposed_duration: String
}

input ProjectApplicationUpdateManyWithWhereNestedInput {
  where: ProjectApplicationScalarWhereInput!
  data: ProjectApplicationUpdateManyDataInput!
}

input ProjectApplicationUpdateWithWhereUniqueNestedInput {
  where: ProjectApplicationWhereUniqueInput!
  data: ProjectApplicationUpdateDataInput!
}

input ProjectApplicationUpsertWithWhereUniqueNestedInput {
  where: ProjectApplicationWhereUniqueInput!
  update: ProjectApplicationUpdateDataInput!
  create: ProjectApplicationCreateInput!
}

input ProjectApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  proposal: String
  proposal_not: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_lt: String
  proposal_lte: String
  proposal_gt: String
  proposal_gte: String
  proposal_contains: String
  proposal_not_contains: String
  proposal_starts_with: String
  proposal_not_starts_with: String
  proposal_ends_with: String
  proposal_not_ends_with: String
  attachments_every: FileWhereInput
  attachments_some: FileWhereInput
  attachments_none: FileWhereInput
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  user: UserWhereInput
  proposed_budget: Float
  proposed_budget_not: Float
  proposed_budget_in: [Float!]
  proposed_budget_not_in: [Float!]
  proposed_budget_lt: Float
  proposed_budget_lte: Float
  proposed_budget_gt: Float
  proposed_budget_gte: Float
  proposed_duration: String
  proposed_duration_not: String
  proposed_duration_in: [String!]
  proposed_duration_not_in: [String!]
  proposed_duration_lt: String
  proposed_duration_lte: String
  proposed_duration_gt: String
  proposed_duration_gte: String
  proposed_duration_contains: String
  proposed_duration_not_contains: String
  proposed_duration_starts_with: String
  proposed_duration_not_starts_with: String
  proposed_duration_ends_with: String
  proposed_duration_not_ends_with: String
  AND: [ProjectApplicationWhereInput!]
  OR: [ProjectApplicationWhereInput!]
  NOT: [ProjectApplicationWhereInput!]
}

input ProjectApplicationWhereUniqueInput {
  id: ID
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  postedBy_id: String!
  company_id: String!
  postedBy: UserCreateOneInput
  company: CompanyCreateOneInput
  title: String!
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  attachments: FileCreateManyInput
  requirements: Json
  applications: ProjectApplicationCreateManyInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  postedBy_id_ASC
  postedBy_id_DESC
  company_id_ASC
  company_id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  short_description_ASC
  short_description_DESC
  duration_ASC
  duration_DESC
  proposed_budget_ASC
  proposed_budget_DESC
  paid_budget_ASC
  paid_budget_DESC
  requirements_ASC
  requirements_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy_id: String!
  company_id: String!
  title: String!
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  requirements: Json
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateDataInput {
  postedBy_id: String
  company_id: String
  postedBy: UserUpdateOneInput
  company: CompanyUpdateOneInput
  title: String
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  attachments: FileUpdateManyInput
  requirements: Json
  applications: ProjectApplicationUpdateManyInput
}

input ProjectUpdateInput {
  postedBy_id: String
  company_id: String
  postedBy: UserUpdateOneInput
  company: CompanyUpdateOneInput
  title: String
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  attachments: FileUpdateManyInput
  requirements: Json
  applications: ProjectApplicationUpdateManyInput
}

input ProjectUpdateManyMutationInput {
  postedBy_id: String
  company_id: String
  title: String
  description: String
  short_description: String
  duration: Int
  proposed_budget: Float
  paid_budget: Float
  requirements: Json
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneRequiredInput {
  create: ProjectCreateInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy_id: String
  postedBy_id_not: String
  postedBy_id_in: [String!]
  postedBy_id_not_in: [String!]
  postedBy_id_lt: String
  postedBy_id_lte: String
  postedBy_id_gt: String
  postedBy_id_gte: String
  postedBy_id_contains: String
  postedBy_id_not_contains: String
  postedBy_id_starts_with: String
  postedBy_id_not_starts_with: String
  postedBy_id_ends_with: String
  postedBy_id_not_ends_with: String
  company_id: String
  company_id_not: String
  company_id_in: [String!]
  company_id_not_in: [String!]
  company_id_lt: String
  company_id_lte: String
  company_id_gt: String
  company_id_gte: String
  company_id_contains: String
  company_id_not_contains: String
  company_id_starts_with: String
  company_id_not_starts_with: String
  company_id_ends_with: String
  company_id_not_ends_with: String
  postedBy: UserWhereInput
  company: CompanyWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  short_description: String
  short_description_not: String
  short_description_in: [String!]
  short_description_not_in: [String!]
  short_description_lt: String
  short_description_lte: String
  short_description_gt: String
  short_description_gte: String
  short_description_contains: String
  short_description_not_contains: String
  short_description_starts_with: String
  short_description_not_starts_with: String
  short_description_ends_with: String
  short_description_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  proposed_budget: Float
  proposed_budget_not: Float
  proposed_budget_in: [Float!]
  proposed_budget_not_in: [Float!]
  proposed_budget_lt: Float
  proposed_budget_lte: Float
  proposed_budget_gt: Float
  proposed_budget_gte: Float
  paid_budget: Float
  paid_budget_not: Float
  paid_budget_in: [Float!]
  paid_budget_not_in: [Float!]
  paid_budget_lt: Float
  paid_budget_lte: Float
  paid_budget_gt: Float
  paid_budget_gte: Float
  attachments_every: FileWhereInput
  attachments_some: FileWhereInput
  attachments_none: FileWhereInput
  applications_every: ProjectApplicationWhereInput
  applications_some: ProjectApplicationWhereInput
  applications_none: ProjectApplicationWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  cvDoctor(where: CvDoctorWhereUniqueInput!): CvDoctor
  cvDoctors(where: CvDoctorWhereInput, orderBy: CvDoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CvDoctor]!
  cvDoctorsConnection(where: CvDoctorWhereInput, orderBy: CvDoctorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CvDoctorConnection!
  cvDoctorReply(where: CvDoctorReplyWhereUniqueInput!): CvDoctorReply
  cvDoctorReplies(where: CvDoctorReplyWhereInput, orderBy: CvDoctorReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CvDoctorReply]!
  cvDoctorRepliesConnection(where: CvDoctorReplyWhereInput, orderBy: CvDoctorReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CvDoctorReplyConnection!
  cvFile(where: CvFileWhereUniqueInput!): CvFile
  cvFiles(where: CvFileWhereInput, orderBy: CvFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CvFile]!
  cvFilesConnection(where: CvFileWhereInput, orderBy: CvFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CvFileConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  jobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  jobApplications(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplication]!
  jobApplicationsConnection(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobApplicationConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectApplication(where: ProjectApplicationWhereUniqueInput!): ProjectApplication
  projectApplications(where: ProjectApplicationWhereInput, orderBy: ProjectApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectApplication]!
  projectApplicationsConnection(where: ProjectApplicationWhereInput, orderBy: ProjectApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectApplicationConnection!
  savedJob(where: SavedJobWhereUniqueInput!): SavedJob
  savedJobs(where: SavedJobWhereInput, orderBy: SavedJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedJob]!
  savedJobsConnection(where: SavedJobWhereInput, orderBy: SavedJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavedJobConnection!
  savedProject(where: SavedProjectWhereUniqueInput!): SavedProject
  savedProjects(where: SavedProjectWhereInput, orderBy: SavedProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedProject]!
  savedProjectsConnection(where: SavedProjectWhereInput, orderBy: SavedProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavedProjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SavedJob {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  job_id: String
  job: Job!
  user_id: String
  user: User!
}

type SavedJobConnection {
  pageInfo: PageInfo!
  edges: [SavedJobEdge]!
  aggregate: AggregateSavedJob!
}

input SavedJobCreateInput {
  id: ID
  job_id: String
  job: JobCreateOneInput!
  user_id: String
  user: UserCreateOneInput!
}

type SavedJobEdge {
  node: SavedJob!
  cursor: String!
}

enum SavedJobOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  job_id_ASC
  job_id_DESC
  user_id_ASC
  user_id_DESC
}

type SavedJobPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  job_id: String
  user_id: String
}

type SavedJobSubscriptionPayload {
  mutation: MutationType!
  node: SavedJob
  updatedFields: [String!]
  previousValues: SavedJobPreviousValues
}

input SavedJobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavedJobWhereInput
  AND: [SavedJobSubscriptionWhereInput!]
  OR: [SavedJobSubscriptionWhereInput!]
  NOT: [SavedJobSubscriptionWhereInput!]
}

input SavedJobUpdateInput {
  job_id: String
  job: JobUpdateOneRequiredInput
  user_id: String
  user: UserUpdateOneRequiredInput
}

input SavedJobUpdateManyMutationInput {
  job_id: String
  user_id: String
}

input SavedJobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  job_id: String
  job_id_not: String
  job_id_in: [String!]
  job_id_not_in: [String!]
  job_id_lt: String
  job_id_lte: String
  job_id_gt: String
  job_id_gte: String
  job_id_contains: String
  job_id_not_contains: String
  job_id_starts_with: String
  job_id_not_starts_with: String
  job_id_ends_with: String
  job_id_not_ends_with: String
  job: JobWhereInput
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  user: UserWhereInput
  AND: [SavedJobWhereInput!]
  OR: [SavedJobWhereInput!]
  NOT: [SavedJobWhereInput!]
}

input SavedJobWhereUniqueInput {
  id: ID
}

type SavedProject {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  project_id: String
  project: Project!
  user_id: String
  user: User!
}

type SavedProjectConnection {
  pageInfo: PageInfo!
  edges: [SavedProjectEdge]!
  aggregate: AggregateSavedProject!
}

input SavedProjectCreateInput {
  id: ID
  project_id: String
  project: ProjectCreateOneInput!
  user_id: String
  user: UserCreateOneInput!
}

type SavedProjectEdge {
  node: SavedProject!
  cursor: String!
}

enum SavedProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  project_id_ASC
  project_id_DESC
  user_id_ASC
  user_id_DESC
}

type SavedProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  project_id: String
  user_id: String
}

type SavedProjectSubscriptionPayload {
  mutation: MutationType!
  node: SavedProject
  updatedFields: [String!]
  previousValues: SavedProjectPreviousValues
}

input SavedProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavedProjectWhereInput
  AND: [SavedProjectSubscriptionWhereInput!]
  OR: [SavedProjectSubscriptionWhereInput!]
  NOT: [SavedProjectSubscriptionWhereInput!]
}

input SavedProjectUpdateInput {
  project_id: String
  project: ProjectUpdateOneRequiredInput
  user_id: String
  user: UserUpdateOneRequiredInput
}

input SavedProjectUpdateManyMutationInput {
  project_id: String
  user_id: String
}

input SavedProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  project_id: String
  project_id_not: String
  project_id_in: [String!]
  project_id_not_in: [String!]
  project_id_lt: String
  project_id_lte: String
  project_id_gt: String
  project_id_gte: String
  project_id_contains: String
  project_id_not_contains: String
  project_id_starts_with: String
  project_id_not_starts_with: String
  project_id_ends_with: String
  project_id_not_ends_with: String
  project: ProjectWhereInput
  user_id: String
  user_id_not: String
  user_id_in: [String!]
  user_id_not_in: [String!]
  user_id_lt: String
  user_id_lte: String
  user_id_gt: String
  user_id_gte: String
  user_id_contains: String
  user_id_not_contains: String
  user_id_starts_with: String
  user_id_not_starts_with: String
  user_id_ends_with: String
  user_id_not_ends_with: String
  user: UserWhereInput
  AND: [SavedProjectWhereInput!]
  OR: [SavedProjectWhereInput!]
  NOT: [SavedProjectWhereInput!]
}

input SavedProjectWhereUniqueInput {
  id: ID
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  cvDoctor(where: CvDoctorSubscriptionWhereInput): CvDoctorSubscriptionPayload
  cvDoctorReply(where: CvDoctorReplySubscriptionWhereInput): CvDoctorReplySubscriptionPayload
  cvFile(where: CvFileSubscriptionWhereInput): CvFileSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  jobApplication(where: JobApplicationSubscriptionWhereInput): JobApplicationSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectApplication(where: ProjectApplicationSubscriptionWhereInput): ProjectApplicationSubscriptionPayload
  savedJob(where: SavedJobSubscriptionWhereInput): SavedJobSubscriptionPayload
  savedProject(where: SavedProjectSubscriptionWhereInput): SavedProjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: File
  photo_url(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  signup_reason: String!
  uk_citizen: Boolean!
  legal_right: Boolean!
  how_hear: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: Plan
  createdAt: DateTime!
  updatedAt: DateTime!
  isApproved: Boolean
  isRecruiter: Boolean
  company: Company
  degree_profile: Json
  phonenumber: String
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  posts: PostCreateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyCreateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompanyInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  posts: PostCreateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  degree_profile: Json
  phonenumber: String
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  posts: PostCreateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyCreateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  following: UserCreateManyWithoutFollowingInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  posts: PostCreateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyCreateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserCreateManyWithoutFollowersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutNotificationsInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  posts: PostCreateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyCreateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  student_confirm: FileCreateOneInput
  photo_url: FileCreateManyInput
  signup_reason: String!
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String!
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  plan: PlanCreateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyCreateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  notifications: NotificationCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  dob_ASC
  dob_DESC
  home_address_ASC
  home_address_DESC
  utc_number_ASC
  utc_number_DESC
  hobbies_ASC
  hobbies_DESC
  signup_reason_ASC
  signup_reason_DESC
  uk_citizen_ASC
  uk_citizen_DESC
  legal_right_ASC
  legal_right_DESC
  how_hear_ASC
  how_hear_DESC
  user_type_ASC
  user_type_DESC
  languages_ASC
  languages_DESC
  education_level_ASC
  education_level_DESC
  job_title_ASC
  job_title_DESC
  plan_id_ASC
  plan_id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isApproved_ASC
  isApproved_DESC
  isRecruiter_ASC
  isRecruiter_DESC
  degree_profile_ASC
  degree_profile_DESC
  phonenumber_ASC
  phonenumber_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json!
  signup_reason: String!
  uk_citizen: Boolean!
  legal_right: Boolean!
  how_hear: String!
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  isApproved: Boolean
  isRecruiter: Boolean
  degree_profile: Json
  phonenumber: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  home_address: String
  home_address_not: String
  home_address_in: [String!]
  home_address_not_in: [String!]
  home_address_lt: String
  home_address_lte: String
  home_address_gt: String
  home_address_gte: String
  home_address_contains: String
  home_address_not_contains: String
  home_address_starts_with: String
  home_address_not_starts_with: String
  home_address_ends_with: String
  home_address_not_ends_with: String
  utc_number: String
  utc_number_not: String
  utc_number_in: [String!]
  utc_number_not_in: [String!]
  utc_number_lt: String
  utc_number_lte: String
  utc_number_gt: String
  utc_number_gte: String
  utc_number_contains: String
  utc_number_not_contains: String
  utc_number_starts_with: String
  utc_number_not_starts_with: String
  utc_number_ends_with: String
  utc_number_not_ends_with: String
  signup_reason: String
  signup_reason_not: String
  signup_reason_in: [String!]
  signup_reason_not_in: [String!]
  signup_reason_lt: String
  signup_reason_lte: String
  signup_reason_gt: String
  signup_reason_gte: String
  signup_reason_contains: String
  signup_reason_not_contains: String
  signup_reason_starts_with: String
  signup_reason_not_starts_with: String
  signup_reason_ends_with: String
  signup_reason_not_ends_with: String
  uk_citizen: Boolean
  uk_citizen_not: Boolean
  legal_right: Boolean
  legal_right_not: Boolean
  how_hear: String
  how_hear_not: String
  how_hear_in: [String!]
  how_hear_not_in: [String!]
  how_hear_lt: String
  how_hear_lte: String
  how_hear_gt: String
  how_hear_gte: String
  how_hear_contains: String
  how_hear_not_contains: String
  how_hear_starts_with: String
  how_hear_not_starts_with: String
  how_hear_ends_with: String
  how_hear_not_ends_with: String
  user_type: Int
  user_type_not: Int
  user_type_in: [Int!]
  user_type_not_in: [Int!]
  user_type_lt: Int
  user_type_lte: Int
  user_type_gt: Int
  user_type_gte: Int
  job_title: String
  job_title_not: String
  job_title_in: [String!]
  job_title_not_in: [String!]
  job_title_lt: String
  job_title_lte: String
  job_title_gt: String
  job_title_gte: String
  job_title_contains: String
  job_title_not_contains: String
  job_title_starts_with: String
  job_title_not_starts_with: String
  job_title_ends_with: String
  job_title_not_ends_with: String
  plan_id: String
  plan_id_not: String
  plan_id_in: [String!]
  plan_id_not_in: [String!]
  plan_id_lt: String
  plan_id_lte: String
  plan_id_gt: String
  plan_id_gte: String
  plan_id_contains: String
  plan_id_not_contains: String
  plan_id_starts_with: String
  plan_id_not_starts_with: String
  plan_id_ends_with: String
  plan_id_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isApproved: Boolean
  isApproved_not: Boolean
  isRecruiter: Boolean
  isRecruiter_not: Boolean
  phonenumber: String
  phonenumber_not: String
  phonenumber_in: [String!]
  phonenumber_not_in: [String!]
  phonenumber_lt: String
  phonenumber_lte: String
  phonenumber_gt: String
  phonenumber_gte: String
  phonenumber_contains: String
  phonenumber_not_contains: String
  phonenumber_starts_with: String
  phonenumber_not_starts_with: String
  phonenumber_ends_with: String
  phonenumber_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  isApproved: Boolean
  isRecruiter: Boolean
  degree_profile: Json
  phonenumber: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  isApproved: Boolean
  isRecruiter: Boolean
  degree_profile: Json
  phonenumber: String
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCompanyDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowersDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  following: UserUpdateManyWithoutFollowingInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowingDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotificationsDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  posts: PostUpdateManyWithoutAuthorInput
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  first_name: String
  last_name: String
  dob: DateTime
  home_address: String
  utc_number: String
  hobbies: Json
  student_confirm: FileUpdateOneInput
  photo_url: FileUpdateManyInput
  signup_reason: String
  uk_citizen: Boolean
  legal_right: Boolean
  how_hear: String
  user_type: Int
  languages: Json
  education_level: Json
  job_title: String
  plan_id: String
  plan: PlanUpdateOneInput
  isApproved: Boolean
  isRecruiter: Boolean
  company: CompanyUpdateOneWithoutRecruitersInput
  degree_profile: Json
  phonenumber: String
  followers: UserUpdateManyWithoutFollowersInput
  following: UserUpdateManyWithoutFollowingInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  home_address: String
  home_address_not: String
  home_address_in: [String!]
  home_address_not_in: [String!]
  home_address_lt: String
  home_address_lte: String
  home_address_gt: String
  home_address_gte: String
  home_address_contains: String
  home_address_not_contains: String
  home_address_starts_with: String
  home_address_not_starts_with: String
  home_address_ends_with: String
  home_address_not_ends_with: String
  utc_number: String
  utc_number_not: String
  utc_number_in: [String!]
  utc_number_not_in: [String!]
  utc_number_lt: String
  utc_number_lte: String
  utc_number_gt: String
  utc_number_gte: String
  utc_number_contains: String
  utc_number_not_contains: String
  utc_number_starts_with: String
  utc_number_not_starts_with: String
  utc_number_ends_with: String
  utc_number_not_ends_with: String
  student_confirm: FileWhereInput
  photo_url_every: FileWhereInput
  photo_url_some: FileWhereInput
  photo_url_none: FileWhereInput
  signup_reason: String
  signup_reason_not: String
  signup_reason_in: [String!]
  signup_reason_not_in: [String!]
  signup_reason_lt: String
  signup_reason_lte: String
  signup_reason_gt: String
  signup_reason_gte: String
  signup_reason_contains: String
  signup_reason_not_contains: String
  signup_reason_starts_with: String
  signup_reason_not_starts_with: String
  signup_reason_ends_with: String
  signup_reason_not_ends_with: String
  uk_citizen: Boolean
  uk_citizen_not: Boolean
  legal_right: Boolean
  legal_right_not: Boolean
  how_hear: String
  how_hear_not: String
  how_hear_in: [String!]
  how_hear_not_in: [String!]
  how_hear_lt: String
  how_hear_lte: String
  how_hear_gt: String
  how_hear_gte: String
  how_hear_contains: String
  how_hear_not_contains: String
  how_hear_starts_with: String
  how_hear_not_starts_with: String
  how_hear_ends_with: String
  how_hear_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  user_type: Int
  user_type_not: Int
  user_type_in: [Int!]
  user_type_not_in: [Int!]
  user_type_lt: Int
  user_type_lte: Int
  user_type_gt: Int
  user_type_gte: Int
  job_title: String
  job_title_not: String
  job_title_in: [String!]
  job_title_not_in: [String!]
  job_title_lt: String
  job_title_lte: String
  job_title_gt: String
  job_title_gte: String
  job_title_contains: String
  job_title_not_contains: String
  job_title_starts_with: String
  job_title_not_starts_with: String
  job_title_ends_with: String
  job_title_not_ends_with: String
  plan_id: String
  plan_id_not: String
  plan_id_in: [String!]
  plan_id_not_in: [String!]
  plan_id_lt: String
  plan_id_lte: String
  plan_id_gt: String
  plan_id_gte: String
  plan_id_contains: String
  plan_id_not_contains: String
  plan_id_starts_with: String
  plan_id_not_starts_with: String
  plan_id_ends_with: String
  plan_id_not_ends_with: String
  plan: PlanWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isApproved: Boolean
  isApproved_not: Boolean
  isRecruiter: Boolean
  isRecruiter_not: Boolean
  company: CompanyWhereInput
  phonenumber: String
  phonenumber_not: String
  phonenumber_in: [String!]
  phonenumber_not_in: [String!]
  phonenumber_lt: String
  phonenumber_lte: String
  phonenumber_gt: String
  phonenumber_gte: String
  phonenumber_contains: String
  phonenumber_not_contains: String
  phonenumber_starts_with: String
  phonenumber_not_starts_with: String
  phonenumber_ends_with: String
  phonenumber_not_ends_with: String
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    