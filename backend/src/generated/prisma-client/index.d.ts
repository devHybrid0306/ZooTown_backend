// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  cvDoctor: (where?: CvDoctorWhereInput) => Promise<boolean>;
  cvDoctorReply: (where?: CvDoctorReplyWhereInput) => Promise<boolean>;
  cvFile: (where?: CvFileWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  job: (where?: JobWhereInput) => Promise<boolean>;
  jobApplication: (where?: JobApplicationWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  plan: (where?: PlanWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectApplication: (
    where?: ProjectApplicationWhereInput
  ) => Promise<boolean>;
  savedJob: (where?: SavedJobWhereInput) => Promise<boolean>;
  savedProject: (where?: SavedProjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  cvDoctor: (where: CvDoctorWhereUniqueInput) => CvDoctorNullablePromise;
  cvDoctors: (args?: {
    where?: CvDoctorWhereInput;
    orderBy?: CvDoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CvDoctor>;
  cvDoctorsConnection: (args?: {
    where?: CvDoctorWhereInput;
    orderBy?: CvDoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CvDoctorConnectionPromise;
  cvDoctorReply: (
    where: CvDoctorReplyWhereUniqueInput
  ) => CvDoctorReplyNullablePromise;
  cvDoctorReplies: (args?: {
    where?: CvDoctorReplyWhereInput;
    orderBy?: CvDoctorReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CvDoctorReply>;
  cvDoctorRepliesConnection: (args?: {
    where?: CvDoctorReplyWhereInput;
    orderBy?: CvDoctorReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CvDoctorReplyConnectionPromise;
  cvFile: (where: CvFileWhereUniqueInput) => CvFileNullablePromise;
  cvFiles: (args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CvFile>;
  cvFilesConnection: (args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CvFileConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  job: (where: JobWhereUniqueInput) => JobNullablePromise;
  jobs: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Job>;
  jobsConnection: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobConnectionPromise;
  jobApplication: (
    where: JobApplicationWhereUniqueInput
  ) => JobApplicationNullablePromise;
  jobApplications: (args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<JobApplication>;
  jobApplicationsConnection: (args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobApplicationConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  plan: (where: PlanWhereUniqueInput) => PlanNullablePromise;
  plans: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Plan>;
  plansConnection: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlanConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectApplication: (
    where: ProjectApplicationWhereUniqueInput
  ) => ProjectApplicationNullablePromise;
  projectApplications: (args?: {
    where?: ProjectApplicationWhereInput;
    orderBy?: ProjectApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectApplication>;
  projectApplicationsConnection: (args?: {
    where?: ProjectApplicationWhereInput;
    orderBy?: ProjectApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectApplicationConnectionPromise;
  savedJob: (where: SavedJobWhereUniqueInput) => SavedJobNullablePromise;
  savedJobs: (args?: {
    where?: SavedJobWhereInput;
    orderBy?: SavedJobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SavedJob>;
  savedJobsConnection: (args?: {
    where?: SavedJobWhereInput;
    orderBy?: SavedJobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SavedJobConnectionPromise;
  savedProject: (
    where: SavedProjectWhereUniqueInput
  ) => SavedProjectNullablePromise;
  savedProjects: (args?: {
    where?: SavedProjectWhereInput;
    orderBy?: SavedProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SavedProject>;
  savedProjectsConnection: (args?: {
    where?: SavedProjectWhereInput;
    orderBy?: SavedProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SavedProjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createCvDoctor: (data: CvDoctorCreateInput) => CvDoctorPromise;
  updateCvDoctor: (args: {
    data: CvDoctorUpdateInput;
    where: CvDoctorWhereUniqueInput;
  }) => CvDoctorPromise;
  updateManyCvDoctors: (args: {
    data: CvDoctorUpdateManyMutationInput;
    where?: CvDoctorWhereInput;
  }) => BatchPayloadPromise;
  upsertCvDoctor: (args: {
    where: CvDoctorWhereUniqueInput;
    create: CvDoctorCreateInput;
    update: CvDoctorUpdateInput;
  }) => CvDoctorPromise;
  deleteCvDoctor: (where: CvDoctorWhereUniqueInput) => CvDoctorPromise;
  deleteManyCvDoctors: (where?: CvDoctorWhereInput) => BatchPayloadPromise;
  createCvDoctorReply: (data: CvDoctorReplyCreateInput) => CvDoctorReplyPromise;
  updateCvDoctorReply: (args: {
    data: CvDoctorReplyUpdateInput;
    where: CvDoctorReplyWhereUniqueInput;
  }) => CvDoctorReplyPromise;
  updateManyCvDoctorReplies: (args: {
    data: CvDoctorReplyUpdateManyMutationInput;
    where?: CvDoctorReplyWhereInput;
  }) => BatchPayloadPromise;
  upsertCvDoctorReply: (args: {
    where: CvDoctorReplyWhereUniqueInput;
    create: CvDoctorReplyCreateInput;
    update: CvDoctorReplyUpdateInput;
  }) => CvDoctorReplyPromise;
  deleteCvDoctorReply: (
    where: CvDoctorReplyWhereUniqueInput
  ) => CvDoctorReplyPromise;
  deleteManyCvDoctorReplies: (
    where?: CvDoctorReplyWhereInput
  ) => BatchPayloadPromise;
  createCvFile: (data: CvFileCreateInput) => CvFilePromise;
  updateCvFile: (args: {
    data: CvFileUpdateInput;
    where: CvFileWhereUniqueInput;
  }) => CvFilePromise;
  updateManyCvFiles: (args: {
    data: CvFileUpdateManyMutationInput;
    where?: CvFileWhereInput;
  }) => BatchPayloadPromise;
  upsertCvFile: (args: {
    where: CvFileWhereUniqueInput;
    create: CvFileCreateInput;
    update: CvFileUpdateInput;
  }) => CvFilePromise;
  deleteCvFile: (where: CvFileWhereUniqueInput) => CvFilePromise;
  deleteManyCvFiles: (where?: CvFileWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createJob: (data: JobCreateInput) => JobPromise;
  updateJob: (args: {
    data: JobUpdateInput;
    where: JobWhereUniqueInput;
  }) => JobPromise;
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput;
    where?: JobWhereInput;
  }) => BatchPayloadPromise;
  upsertJob: (args: {
    where: JobWhereUniqueInput;
    create: JobCreateInput;
    update: JobUpdateInput;
  }) => JobPromise;
  deleteJob: (where: JobWhereUniqueInput) => JobPromise;
  deleteManyJobs: (where?: JobWhereInput) => BatchPayloadPromise;
  createJobApplication: (
    data: JobApplicationCreateInput
  ) => JobApplicationPromise;
  updateJobApplication: (args: {
    data: JobApplicationUpdateInput;
    where: JobApplicationWhereUniqueInput;
  }) => JobApplicationPromise;
  updateManyJobApplications: (args: {
    data: JobApplicationUpdateManyMutationInput;
    where?: JobApplicationWhereInput;
  }) => BatchPayloadPromise;
  upsertJobApplication: (args: {
    where: JobApplicationWhereUniqueInput;
    create: JobApplicationCreateInput;
    update: JobApplicationUpdateInput;
  }) => JobApplicationPromise;
  deleteJobApplication: (
    where: JobApplicationWhereUniqueInput
  ) => JobApplicationPromise;
  deleteManyJobApplications: (
    where?: JobApplicationWhereInput
  ) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createPlan: (data: PlanCreateInput) => PlanPromise;
  updatePlan: (args: {
    data: PlanUpdateInput;
    where: PlanWhereUniqueInput;
  }) => PlanPromise;
  updateManyPlans: (args: {
    data: PlanUpdateManyMutationInput;
    where?: PlanWhereInput;
  }) => BatchPayloadPromise;
  upsertPlan: (args: {
    where: PlanWhereUniqueInput;
    create: PlanCreateInput;
    update: PlanUpdateInput;
  }) => PlanPromise;
  deletePlan: (where: PlanWhereUniqueInput) => PlanPromise;
  deleteManyPlans: (where?: PlanWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectApplication: (
    data: ProjectApplicationCreateInput
  ) => ProjectApplicationPromise;
  updateProjectApplication: (args: {
    data: ProjectApplicationUpdateInput;
    where: ProjectApplicationWhereUniqueInput;
  }) => ProjectApplicationPromise;
  updateManyProjectApplications: (args: {
    data: ProjectApplicationUpdateManyMutationInput;
    where?: ProjectApplicationWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectApplication: (args: {
    where: ProjectApplicationWhereUniqueInput;
    create: ProjectApplicationCreateInput;
    update: ProjectApplicationUpdateInput;
  }) => ProjectApplicationPromise;
  deleteProjectApplication: (
    where: ProjectApplicationWhereUniqueInput
  ) => ProjectApplicationPromise;
  deleteManyProjectApplications: (
    where?: ProjectApplicationWhereInput
  ) => BatchPayloadPromise;
  createSavedJob: (data: SavedJobCreateInput) => SavedJobPromise;
  updateSavedJob: (args: {
    data: SavedJobUpdateInput;
    where: SavedJobWhereUniqueInput;
  }) => SavedJobPromise;
  updateManySavedJobs: (args: {
    data: SavedJobUpdateManyMutationInput;
    where?: SavedJobWhereInput;
  }) => BatchPayloadPromise;
  upsertSavedJob: (args: {
    where: SavedJobWhereUniqueInput;
    create: SavedJobCreateInput;
    update: SavedJobUpdateInput;
  }) => SavedJobPromise;
  deleteSavedJob: (where: SavedJobWhereUniqueInput) => SavedJobPromise;
  deleteManySavedJobs: (where?: SavedJobWhereInput) => BatchPayloadPromise;
  createSavedProject: (data: SavedProjectCreateInput) => SavedProjectPromise;
  updateSavedProject: (args: {
    data: SavedProjectUpdateInput;
    where: SavedProjectWhereUniqueInput;
  }) => SavedProjectPromise;
  updateManySavedProjects: (args: {
    data: SavedProjectUpdateManyMutationInput;
    where?: SavedProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertSavedProject: (args: {
    where: SavedProjectWhereUniqueInput;
    create: SavedProjectCreateInput;
    update: SavedProjectUpdateInput;
  }) => SavedProjectPromise;
  deleteSavedProject: (
    where: SavedProjectWhereUniqueInput
  ) => SavedProjectPromise;
  deleteManySavedProjects: (
    where?: SavedProjectWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  cvDoctor: (
    where?: CvDoctorSubscriptionWhereInput
  ) => CvDoctorSubscriptionPayloadSubscription;
  cvDoctorReply: (
    where?: CvDoctorReplySubscriptionWhereInput
  ) => CvDoctorReplySubscriptionPayloadSubscription;
  cvFile: (
    where?: CvFileSubscriptionWhereInput
  ) => CvFileSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  job: (
    where?: JobSubscriptionWhereInput
  ) => JobSubscriptionPayloadSubscription;
  jobApplication: (
    where?: JobApplicationSubscriptionWhereInput
  ) => JobApplicationSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  plan: (
    where?: PlanSubscriptionWhereInput
  ) => PlanSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectApplication: (
    where?: ProjectApplicationSubscriptionWhereInput
  ) => ProjectApplicationSubscriptionPayloadSubscription;
  savedJob: (
    where?: SavedJobSubscriptionWhereInput
  ) => SavedJobSubscriptionPayloadSubscription;
  savedProject: (
    where?: SavedProjectSubscriptionWhereInput
  ) => SavedProjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type JobApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "proposal_ASC"
  | "proposal_DESC"
  | "user_id_ASC"
  | "user_id_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type CvDoctorReplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "request_id_ASC"
  | "request_id_DESC"
  | "postedBy_id_ASC"
  | "postedBy_id_DESC";

export type SavedProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "project_id_ASC"
  | "project_id_DESC"
  | "user_id_ASC"
  | "user_id_DESC";

export type CvDoctorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "user_id_ASC"
  | "user_id_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "postedBy_id_ASC"
  | "postedBy_id_DESC"
  | "company_id_ASC"
  | "company_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "short_description_ASC"
  | "short_description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "proposed_budget_ASC"
  | "proposed_budget_DESC"
  | "paid_budget_ASC"
  | "paid_budget_DESC"
  | "requirements_ASC"
  | "requirements_DESC";

export type NOTIFICATION_TYPE =
  | "FOLLOWED"
  | "JOB_INVITE"
  | "PROJECT_INVITE"
  | "NEW_MESSAGE"
  | "REVIEW"
  | "ACCOUNT_ACTIVITY"
  | "JOB_APPLIED"
  | "PROJECT_APPLIED";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "deliveredAt_ASC"
  | "deliveredAt_DESC"
  | "readAt_ASC"
  | "readAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "home_address_ASC"
  | "home_address_DESC"
  | "utc_number_ASC"
  | "utc_number_DESC"
  | "hobbies_ASC"
  | "hobbies_DESC"
  | "signup_reason_ASC"
  | "signup_reason_DESC"
  | "uk_citizen_ASC"
  | "uk_citizen_DESC"
  | "legal_right_ASC"
  | "legal_right_DESC"
  | "how_hear_ASC"
  | "how_hear_DESC"
  | "user_type_ASC"
  | "user_type_DESC"
  | "languages_ASC"
  | "languages_DESC"
  | "education_level_ASC"
  | "education_level_DESC"
  | "job_title_ASC"
  | "job_title_DESC"
  | "plan_id_ASC"
  | "plan_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isApproved_ASC"
  | "isApproved_DESC"
  | "isRecruiter_ASC"
  | "isRecruiter_DESC"
  | "degree_profile_ASC"
  | "degree_profile_DESC"
  | "phonenumber_ASC"
  | "phonenumber_DESC";

export type JobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "postedBy_id_ASC"
  | "postedBy_id_DESC"
  | "company_id_ASC"
  | "company_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "short_description_ASC"
  | "short_description_DESC"
  | "employment_type_ASC"
  | "employment_type_DESC"
  | "type_ASC"
  | "type_DESC"
  | "location_ASC"
  | "location_DESC"
  | "salary_ASC"
  | "salary_DESC"
  | "requirements_ASC"
  | "requirements_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "size_ASC"
  | "size_DESC"
  | "secret_ASC"
  | "secret_DESC"
  | "contentType_ASC"
  | "contentType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "link_ASC"
  | "link_DESC"
  | "readDate_ASC"
  | "readDate_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "address_ASC"
  | "address_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "how_hear_ASC"
  | "how_hear_DESC"
  | "name_ASC"
  | "name_DESC";

export type CvFileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "size_ASC"
  | "size_DESC"
  | "secret_ASC"
  | "secret_DESC"
  | "contentType_ASC"
  | "contentType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ProjectApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "proposal_ASC"
  | "proposal_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "proposed_budget_ASC"
  | "proposed_budget_DESC"
  | "proposed_duration_ASC"
  | "proposed_duration_DESC";

export type PlanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "description_ASC"
  | "description_DESC"
  | "category_ASC"
  | "category_DESC";

export type SavedJobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "job_id_ASC"
  | "job_id_DESC"
  | "user_id_ASC"
  | "user_id_DESC";

export interface CompanyUpsertWithoutRecruitersInput {
  update: CompanyUpdateWithoutRecruitersDataInput;
  create: CompanyCreateWithoutRecruitersInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface JobUpdateManyMutationInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  employment_type?: Maybe<String>;
  type?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Float>;
  requirements?: Maybe<Json>;
}

export interface FileCreateManyInput {
  create?: Maybe<FileCreateInput[] | FileCreateInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface NotificationUpdateManyDataInput {
  type?: Maybe<NOTIFICATION_TYPE>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface SavedProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SavedProjectWhereInput>;
  AND?: Maybe<
    SavedProjectSubscriptionWhereInput[] | SavedProjectSubscriptionWhereInput
  >;
  OR?: Maybe<
    SavedProjectSubscriptionWhereInput[] | SavedProjectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SavedProjectSubscriptionWhereInput[] | SavedProjectSubscriptionWhereInput
  >;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content?: Maybe<String>;
}

export interface ProjectApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectApplicationWhereInput>;
  AND?: Maybe<
    | ProjectApplicationSubscriptionWhereInput[]
    | ProjectApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectApplicationSubscriptionWhereInput[]
    | ProjectApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectApplicationSubscriptionWhereInput[]
    | ProjectApplicationSubscriptionWhereInput
  >;
}

export interface PlanCreateOneInput {
  create?: Maybe<PlanCreateInput>;
  connect?: Maybe<PlanWhereUniqueInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PlanCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  category: Int;
}

export type CvDoctorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CvFileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  secret?: Maybe<String>;
  secret_not?: Maybe<String>;
  secret_in?: Maybe<String[] | String>;
  secret_not_in?: Maybe<String[] | String>;
  secret_lt?: Maybe<String>;
  secret_lte?: Maybe<String>;
  secret_gt?: Maybe<String>;
  secret_gte?: Maybe<String>;
  secret_contains?: Maybe<String>;
  secret_not_contains?: Maybe<String>;
  secret_starts_with?: Maybe<String>;
  secret_not_starts_with?: Maybe<String>;
  secret_ends_with?: Maybe<String>;
  secret_not_ends_with?: Maybe<String>;
  contentType?: Maybe<String>;
  contentType_not?: Maybe<String>;
  contentType_in?: Maybe<String[] | String>;
  contentType_not_in?: Maybe<String[] | String>;
  contentType_lt?: Maybe<String>;
  contentType_lte?: Maybe<String>;
  contentType_gt?: Maybe<String>;
  contentType_gte?: Maybe<String>;
  contentType_contains?: Maybe<String>;
  contentType_not_contains?: Maybe<String>;
  contentType_starts_with?: Maybe<String>;
  contentType_not_starts_with?: Maybe<String>;
  contentType_ends_with?: Maybe<String>;
  contentType_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<CvFileWhereInput[] | CvFileWhereInput>;
  OR?: Maybe<CvFileWhereInput[] | CvFileWhereInput>;
  NOT?: Maybe<CvFileWhereInput[] | CvFileWhereInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyCreateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface JobApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobApplicationWhereInput>;
  AND?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
}

export interface CompanyCreateOneWithoutRecruitersInput {
  create?: Maybe<CompanyCreateWithoutRecruitersInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<NOTIFICATION_TYPE>;
  type_not?: Maybe<NOTIFICATION_TYPE>;
  type_in?: Maybe<NOTIFICATION_TYPE[] | NOTIFICATION_TYPE>;
  type_not_in?: Maybe<NOTIFICATION_TYPE[] | NOTIFICATION_TYPE>;
  user?: Maybe<UserWhereInput>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
  readDate_not?: Maybe<DateTimeInput>;
  readDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readDate_lt?: Maybe<DateTimeInput>;
  readDate_lte?: Maybe<DateTimeInput>;
  readDate_gt?: Maybe<DateTimeInput>;
  readDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface CompanyCreateWithoutRecruitersInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name: String;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export type CvDoctorReplyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyCreateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface CvDoctorReplyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  attachments_every?: Maybe<CvFileWhereInput>;
  attachments_some?: Maybe<CvFileWhereInput>;
  attachments_none?: Maybe<CvFileWhereInput>;
  request?: Maybe<CvDoctorWhereInput>;
  request_id?: Maybe<String>;
  request_id_not?: Maybe<String>;
  request_id_in?: Maybe<String[] | String>;
  request_id_not_in?: Maybe<String[] | String>;
  request_id_lt?: Maybe<String>;
  request_id_lte?: Maybe<String>;
  request_id_gt?: Maybe<String>;
  request_id_gte?: Maybe<String>;
  request_id_contains?: Maybe<String>;
  request_id_not_contains?: Maybe<String>;
  request_id_starts_with?: Maybe<String>;
  request_id_not_starts_with?: Maybe<String>;
  request_id_ends_with?: Maybe<String>;
  request_id_not_ends_with?: Maybe<String>;
  postedBy_id?: Maybe<String>;
  postedBy_id_not?: Maybe<String>;
  postedBy_id_in?: Maybe<String[] | String>;
  postedBy_id_not_in?: Maybe<String[] | String>;
  postedBy_id_lt?: Maybe<String>;
  postedBy_id_lte?: Maybe<String>;
  postedBy_id_gt?: Maybe<String>;
  postedBy_id_gte?: Maybe<String>;
  postedBy_id_contains?: Maybe<String>;
  postedBy_id_not_contains?: Maybe<String>;
  postedBy_id_starts_with?: Maybe<String>;
  postedBy_id_not_starts_with?: Maybe<String>;
  postedBy_id_ends_with?: Maybe<String>;
  postedBy_id_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  AND?: Maybe<CvDoctorReplyWhereInput[] | CvDoctorReplyWhereInput>;
  OR?: Maybe<CvDoctorReplyWhereInput[] | CvDoctorReplyWhereInput>;
  NOT?: Maybe<CvDoctorReplyWhereInput[] | CvDoctorReplyWhereInput>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface CvDoctorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CvDoctorWhereInput>;
  AND?: Maybe<
    CvDoctorSubscriptionWhereInput[] | CvDoctorSubscriptionWhereInput
  >;
  OR?: Maybe<CvDoctorSubscriptionWhereInput[] | CvDoctorSubscriptionWhereInput>;
  NOT?: Maybe<
    CvDoctorSubscriptionWhereInput[] | CvDoctorSubscriptionWhereInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<NOTIFICATION_TYPE>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
}

export interface CompanyUpdateInput {
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name?: Maybe<String>;
  recruiters?: Maybe<UserUpdateManyWithoutCompanyInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyWithoutCompanyInput {
  create?: Maybe<
    UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    | UserUpdateWithWhereUniqueWithoutCompanyInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    | UserUpsertWithWhereUniqueWithoutCompanyInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateOneRequiredInput {
  create?: Maybe<ProjectCreateInput>;
  update?: Maybe<ProjectUpdateDataInput>;
  upsert?: Maybe<ProjectUpsertNestedInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCompanyDataInput;
}

export interface SavedProjectUpdateInput {
  project_id?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateWithoutCompanyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface SavedJobUpdateManyMutationInput {
  job_id?: Maybe<String>;
  user_id?: Maybe<String>;
}

export interface FileUpdateOneInput {
  create?: Maybe<FileCreateInput>;
  update?: Maybe<FileUpdateDataInput>;
  upsert?: Maybe<FileUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface JobUpdateOneRequiredInput {
  create?: Maybe<JobCreateInput>;
  update?: Maybe<JobUpdateDataInput>;
  upsert?: Maybe<JobUpsertNestedInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface FileUpdateDataInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface JobApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  proposal?: Maybe<String>;
  proposal_not?: Maybe<String>;
  proposal_in?: Maybe<String[] | String>;
  proposal_not_in?: Maybe<String[] | String>;
  proposal_lt?: Maybe<String>;
  proposal_lte?: Maybe<String>;
  proposal_gt?: Maybe<String>;
  proposal_gte?: Maybe<String>;
  proposal_contains?: Maybe<String>;
  proposal_not_contains?: Maybe<String>;
  proposal_starts_with?: Maybe<String>;
  proposal_not_starts_with?: Maybe<String>;
  proposal_ends_with?: Maybe<String>;
  proposal_not_ends_with?: Maybe<String>;
  attachments_every?: Maybe<FileWhereInput>;
  attachments_some?: Maybe<FileWhereInput>;
  attachments_none?: Maybe<FileWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
  OR?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
  NOT?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
}

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface SavedJobCreateInput {
  id?: Maybe<ID_Input>;
  job_id?: Maybe<String>;
  job: JobCreateOneInput;
  user_id?: Maybe<String>;
  user: UserCreateOneInput;
}

export interface FileUpdateManyInput {
  create?: Maybe<FileCreateInput[] | FileCreateInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueNestedInput[]
    | FileUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueNestedInput[]
    | FileUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput;
  data: FileUpdateDataInput;
}

export interface ProjectApplicationUpdateInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
  proposed_budget?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
}

export interface FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput;
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export type JobApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  secret?: Maybe<String>;
  secret_not?: Maybe<String>;
  secret_in?: Maybe<String[] | String>;
  secret_not_in?: Maybe<String[] | String>;
  secret_lt?: Maybe<String>;
  secret_lte?: Maybe<String>;
  secret_gt?: Maybe<String>;
  secret_gte?: Maybe<String>;
  secret_contains?: Maybe<String>;
  secret_not_contains?: Maybe<String>;
  secret_starts_with?: Maybe<String>;
  secret_not_starts_with?: Maybe<String>;
  secret_ends_with?: Maybe<String>;
  secret_not_ends_with?: Maybe<String>;
  contentType?: Maybe<String>;
  contentType_not?: Maybe<String>;
  contentType_in?: Maybe<String[] | String>;
  contentType_not_in?: Maybe<String[] | String>;
  contentType_lt?: Maybe<String>;
  contentType_lte?: Maybe<String>;
  contentType_gt?: Maybe<String>;
  contentType_gte?: Maybe<String>;
  contentType_contains?: Maybe<String>;
  contentType_not_contains?: Maybe<String>;
  contentType_starts_with?: Maybe<String>;
  contentType_not_starts_with?: Maybe<String>;
  contentType_ends_with?: Maybe<String>;
  contentType_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface PostUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileUpdateManyDataInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  deliveredAt_not?: Maybe<DateTimeInput>;
  deliveredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveredAt_lt?: Maybe<DateTimeInput>;
  deliveredAt_lte?: Maybe<DateTimeInput>;
  deliveredAt_gt?: Maybe<DateTimeInput>;
  deliveredAt_gte?: Maybe<DateTimeInput>;
  readAt?: Maybe<DateTimeInput>;
  readAt_not?: Maybe<DateTimeInput>;
  readAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_lt?: Maybe<DateTimeInput>;
  readAt_lte?: Maybe<DateTimeInput>;
  readAt_gt?: Maybe<DateTimeInput>;
  readAt_gte?: Maybe<DateTimeInput>;
  project?: Maybe<ProjectWhereInput>;
  job?: Maybe<JobWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PlanUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  category?: Maybe<Int>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface PostUpdateManyDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export type PlanWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlanUpdateOneInput {
  create?: Maybe<PlanCreateInput>;
  update?: Maybe<PlanUpdateDataInput>;
  upsert?: Maybe<PlanUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PlanWhereUniqueInput>;
}

export interface UserUpdateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PlanUpdateDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  category?: Maybe<Int>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyCreateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
}

export interface PlanUpsertNestedInput {
  update: PlanUpdateDataInput;
  create: PlanCreateInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateManyMutationInput {
  deliveredAt?: Maybe<DateTimeInput>;
  readAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  home_address_not?: Maybe<String>;
  home_address_in?: Maybe<String[] | String>;
  home_address_not_in?: Maybe<String[] | String>;
  home_address_lt?: Maybe<String>;
  home_address_lte?: Maybe<String>;
  home_address_gt?: Maybe<String>;
  home_address_gte?: Maybe<String>;
  home_address_contains?: Maybe<String>;
  home_address_not_contains?: Maybe<String>;
  home_address_starts_with?: Maybe<String>;
  home_address_not_starts_with?: Maybe<String>;
  home_address_ends_with?: Maybe<String>;
  home_address_not_ends_with?: Maybe<String>;
  utc_number?: Maybe<String>;
  utc_number_not?: Maybe<String>;
  utc_number_in?: Maybe<String[] | String>;
  utc_number_not_in?: Maybe<String[] | String>;
  utc_number_lt?: Maybe<String>;
  utc_number_lte?: Maybe<String>;
  utc_number_gt?: Maybe<String>;
  utc_number_gte?: Maybe<String>;
  utc_number_contains?: Maybe<String>;
  utc_number_not_contains?: Maybe<String>;
  utc_number_starts_with?: Maybe<String>;
  utc_number_not_starts_with?: Maybe<String>;
  utc_number_ends_with?: Maybe<String>;
  utc_number_not_ends_with?: Maybe<String>;
  student_confirm?: Maybe<FileWhereInput>;
  photo_url_every?: Maybe<FileWhereInput>;
  photo_url_some?: Maybe<FileWhereInput>;
  photo_url_none?: Maybe<FileWhereInput>;
  signup_reason?: Maybe<String>;
  signup_reason_not?: Maybe<String>;
  signup_reason_in?: Maybe<String[] | String>;
  signup_reason_not_in?: Maybe<String[] | String>;
  signup_reason_lt?: Maybe<String>;
  signup_reason_lte?: Maybe<String>;
  signup_reason_gt?: Maybe<String>;
  signup_reason_gte?: Maybe<String>;
  signup_reason_contains?: Maybe<String>;
  signup_reason_not_contains?: Maybe<String>;
  signup_reason_starts_with?: Maybe<String>;
  signup_reason_not_starts_with?: Maybe<String>;
  signup_reason_ends_with?: Maybe<String>;
  signup_reason_not_ends_with?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  uk_citizen_not?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  legal_right_not?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  how_hear_not?: Maybe<String>;
  how_hear_in?: Maybe<String[] | String>;
  how_hear_not_in?: Maybe<String[] | String>;
  how_hear_lt?: Maybe<String>;
  how_hear_lte?: Maybe<String>;
  how_hear_gt?: Maybe<String>;
  how_hear_gte?: Maybe<String>;
  how_hear_contains?: Maybe<String>;
  how_hear_not_contains?: Maybe<String>;
  how_hear_starts_with?: Maybe<String>;
  how_hear_not_starts_with?: Maybe<String>;
  how_hear_ends_with?: Maybe<String>;
  how_hear_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  user_type?: Maybe<Int>;
  user_type_not?: Maybe<Int>;
  user_type_in?: Maybe<Int[] | Int>;
  user_type_not_in?: Maybe<Int[] | Int>;
  user_type_lt?: Maybe<Int>;
  user_type_lte?: Maybe<Int>;
  user_type_gt?: Maybe<Int>;
  user_type_gte?: Maybe<Int>;
  job_title?: Maybe<String>;
  job_title_not?: Maybe<String>;
  job_title_in?: Maybe<String[] | String>;
  job_title_not_in?: Maybe<String[] | String>;
  job_title_lt?: Maybe<String>;
  job_title_lte?: Maybe<String>;
  job_title_gt?: Maybe<String>;
  job_title_gte?: Maybe<String>;
  job_title_contains?: Maybe<String>;
  job_title_not_contains?: Maybe<String>;
  job_title_starts_with?: Maybe<String>;
  job_title_not_starts_with?: Maybe<String>;
  job_title_ends_with?: Maybe<String>;
  job_title_not_ends_with?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan_id_not?: Maybe<String>;
  plan_id_in?: Maybe<String[] | String>;
  plan_id_not_in?: Maybe<String[] | String>;
  plan_id_lt?: Maybe<String>;
  plan_id_lte?: Maybe<String>;
  plan_id_gt?: Maybe<String>;
  plan_id_gte?: Maybe<String>;
  plan_id_contains?: Maybe<String>;
  plan_id_not_contains?: Maybe<String>;
  plan_id_starts_with?: Maybe<String>;
  plan_id_not_starts_with?: Maybe<String>;
  plan_id_ends_with?: Maybe<String>;
  plan_id_not_ends_with?: Maybe<String>;
  plan?: Maybe<PlanWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isApproved?: Maybe<Boolean>;
  isApproved_not?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  isRecruiter_not?: Maybe<Boolean>;
  company?: Maybe<CompanyWhereInput>;
  phonenumber?: Maybe<String>;
  phonenumber_not?: Maybe<String>;
  phonenumber_in?: Maybe<String[] | String>;
  phonenumber_not_in?: Maybe<String[] | String>;
  phonenumber_lt?: Maybe<String>;
  phonenumber_lte?: Maybe<String>;
  phonenumber_gt?: Maybe<String>;
  phonenumber_gte?: Maybe<String>;
  phonenumber_contains?: Maybe<String>;
  phonenumber_not_contains?: Maybe<String>;
  phonenumber_starts_with?: Maybe<String>;
  phonenumber_not_starts_with?: Maybe<String>;
  phonenumber_ends_with?: Maybe<String>;
  phonenumber_not_ends_with?: Maybe<String>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateWithoutFollowersDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface JobUpdateDataInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneInput>;
  company?: Maybe<CompanyUpdateOneInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  employment_type?: Maybe<String>;
  type?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Float>;
  applications?: Maybe<JobApplicationUpdateManyInput>;
  attachments?: Maybe<FileUpdateManyInput>;
  requirements?: Maybe<Json>;
}

export interface CompanyUpdateOneWithoutRecruitersInput {
  create?: Maybe<CompanyCreateWithoutRecruitersInput>;
  update?: Maybe<CompanyUpdateWithoutRecruitersDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutRecruitersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export type ProjectApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CompanyUpdateWithoutRecruitersDataInput {
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ProjectApplicationUpdateManyDataInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  user_id?: Maybe<String>;
  proposed_budget?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
}

export interface ProjectCreateOneInput {
  create?: Maybe<ProjectCreateInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export type SavedJobWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface SavedJobWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  job_id?: Maybe<String>;
  job_id_not?: Maybe<String>;
  job_id_in?: Maybe<String[] | String>;
  job_id_not_in?: Maybe<String[] | String>;
  job_id_lt?: Maybe<String>;
  job_id_lte?: Maybe<String>;
  job_id_gt?: Maybe<String>;
  job_id_gte?: Maybe<String>;
  job_id_contains?: Maybe<String>;
  job_id_not_contains?: Maybe<String>;
  job_id_starts_with?: Maybe<String>;
  job_id_not_starts_with?: Maybe<String>;
  job_id_ends_with?: Maybe<String>;
  job_id_not_ends_with?: Maybe<String>;
  job?: Maybe<JobWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SavedJobWhereInput[] | SavedJobWhereInput>;
  OR?: Maybe<SavedJobWhereInput[] | SavedJobWhereInput>;
  NOT?: Maybe<SavedJobWhereInput[] | SavedJobWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface ProjectApplicationUpdateDataInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
  proposed_budget?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
}

export interface UserUpdateWithoutFollowingDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface ProjectApplicationUpdateManyInput {
  create?: Maybe<
    ProjectApplicationCreateInput[] | ProjectApplicationCreateInput
  >;
  update?: Maybe<
    | ProjectApplicationUpdateWithWhereUniqueNestedInput[]
    | ProjectApplicationUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProjectApplicationUpsertWithWhereUniqueNestedInput[]
    | ProjectApplicationUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    ProjectApplicationWhereUniqueInput[] | ProjectApplicationWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectApplicationWhereUniqueInput[] | ProjectApplicationWhereUniqueInput
  >;
  set?: Maybe<
    ProjectApplicationWhereUniqueInput[] | ProjectApplicationWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectApplicationWhereUniqueInput[] | ProjectApplicationWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ProjectApplicationScalarWhereInput[] | ProjectApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectApplicationUpdateManyWithWhereNestedInput[]
    | ProjectApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateDataInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneInput>;
  company?: Maybe<CompanyUpdateOneInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  duration?: Maybe<Int>;
  proposed_budget?: Maybe<Float>;
  paid_budget?: Maybe<Float>;
  attachments?: Maybe<FileUpdateManyInput>;
  requirements?: Maybe<Json>;
  applications?: Maybe<ProjectApplicationUpdateManyInput>;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface ProjectUpdateOneInput {
  create?: Maybe<ProjectCreateInput>;
  update?: Maybe<ProjectUpdateDataInput>;
  upsert?: Maybe<ProjectUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface NotificationUpdateWithoutUserDataInput {
  type?: Maybe<NOTIFICATION_TYPE>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface MessageUpdateInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  readAt?: Maybe<DateTimeInput>;
  project?: Maybe<ProjectUpdateOneInput>;
  job?: Maybe<JobUpdateOneInput>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<NOTIFICATION_TYPE>;
  type_not?: Maybe<NOTIFICATION_TYPE>;
  type_in?: Maybe<NOTIFICATION_TYPE[] | NOTIFICATION_TYPE>;
  type_not_in?: Maybe<NOTIFICATION_TYPE[] | NOTIFICATION_TYPE>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
  readDate_not?: Maybe<DateTimeInput>;
  readDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readDate_lt?: Maybe<DateTimeInput>;
  readDate_lte?: Maybe<DateTimeInput>;
  readDate_gt?: Maybe<DateTimeInput>;
  readDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface ProjectApplicationCreateManyInput {
  create?: Maybe<
    ProjectApplicationCreateInput[] | ProjectApplicationCreateInput
  >;
  connect?: Maybe<
    ProjectApplicationWhereUniqueInput[] | ProjectApplicationWhereUniqueInput
  >;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface UserCreateManyWithoutCompanyInput {
  create?: Maybe<
    UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  deliveredAt?: Maybe<DateTimeInput>;
  readAt?: Maybe<DateTimeInput>;
  project?: Maybe<ProjectCreateOneInput>;
  job?: Maybe<JobCreateOneInput>;
}

export interface FileCreateOneInput {
  create?: Maybe<FileCreateInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface SavedJobSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SavedJobWhereInput>;
  AND?: Maybe<
    SavedJobSubscriptionWhereInput[] | SavedJobSubscriptionWhereInput
  >;
  OR?: Maybe<SavedJobSubscriptionWhereInput[] | SavedJobSubscriptionWhereInput>;
  NOT?: Maybe<
    SavedJobSubscriptionWhereInput[] | SavedJobSubscriptionWhereInput
  >;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  home_address_not?: Maybe<String>;
  home_address_in?: Maybe<String[] | String>;
  home_address_not_in?: Maybe<String[] | String>;
  home_address_lt?: Maybe<String>;
  home_address_lte?: Maybe<String>;
  home_address_gt?: Maybe<String>;
  home_address_gte?: Maybe<String>;
  home_address_contains?: Maybe<String>;
  home_address_not_contains?: Maybe<String>;
  home_address_starts_with?: Maybe<String>;
  home_address_not_starts_with?: Maybe<String>;
  home_address_ends_with?: Maybe<String>;
  home_address_not_ends_with?: Maybe<String>;
  utc_number?: Maybe<String>;
  utc_number_not?: Maybe<String>;
  utc_number_in?: Maybe<String[] | String>;
  utc_number_not_in?: Maybe<String[] | String>;
  utc_number_lt?: Maybe<String>;
  utc_number_lte?: Maybe<String>;
  utc_number_gt?: Maybe<String>;
  utc_number_gte?: Maybe<String>;
  utc_number_contains?: Maybe<String>;
  utc_number_not_contains?: Maybe<String>;
  utc_number_starts_with?: Maybe<String>;
  utc_number_not_starts_with?: Maybe<String>;
  utc_number_ends_with?: Maybe<String>;
  utc_number_not_ends_with?: Maybe<String>;
  signup_reason?: Maybe<String>;
  signup_reason_not?: Maybe<String>;
  signup_reason_in?: Maybe<String[] | String>;
  signup_reason_not_in?: Maybe<String[] | String>;
  signup_reason_lt?: Maybe<String>;
  signup_reason_lte?: Maybe<String>;
  signup_reason_gt?: Maybe<String>;
  signup_reason_gte?: Maybe<String>;
  signup_reason_contains?: Maybe<String>;
  signup_reason_not_contains?: Maybe<String>;
  signup_reason_starts_with?: Maybe<String>;
  signup_reason_not_starts_with?: Maybe<String>;
  signup_reason_ends_with?: Maybe<String>;
  signup_reason_not_ends_with?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  uk_citizen_not?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  legal_right_not?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  how_hear_not?: Maybe<String>;
  how_hear_in?: Maybe<String[] | String>;
  how_hear_not_in?: Maybe<String[] | String>;
  how_hear_lt?: Maybe<String>;
  how_hear_lte?: Maybe<String>;
  how_hear_gt?: Maybe<String>;
  how_hear_gte?: Maybe<String>;
  how_hear_contains?: Maybe<String>;
  how_hear_not_contains?: Maybe<String>;
  how_hear_starts_with?: Maybe<String>;
  how_hear_not_starts_with?: Maybe<String>;
  how_hear_ends_with?: Maybe<String>;
  how_hear_not_ends_with?: Maybe<String>;
  user_type?: Maybe<Int>;
  user_type_not?: Maybe<Int>;
  user_type_in?: Maybe<Int[] | Int>;
  user_type_not_in?: Maybe<Int[] | Int>;
  user_type_lt?: Maybe<Int>;
  user_type_lte?: Maybe<Int>;
  user_type_gt?: Maybe<Int>;
  user_type_gte?: Maybe<Int>;
  job_title?: Maybe<String>;
  job_title_not?: Maybe<String>;
  job_title_in?: Maybe<String[] | String>;
  job_title_not_in?: Maybe<String[] | String>;
  job_title_lt?: Maybe<String>;
  job_title_lte?: Maybe<String>;
  job_title_gt?: Maybe<String>;
  job_title_gte?: Maybe<String>;
  job_title_contains?: Maybe<String>;
  job_title_not_contains?: Maybe<String>;
  job_title_starts_with?: Maybe<String>;
  job_title_not_starts_with?: Maybe<String>;
  job_title_ends_with?: Maybe<String>;
  job_title_not_ends_with?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan_id_not?: Maybe<String>;
  plan_id_in?: Maybe<String[] | String>;
  plan_id_not_in?: Maybe<String[] | String>;
  plan_id_lt?: Maybe<String>;
  plan_id_lte?: Maybe<String>;
  plan_id_gt?: Maybe<String>;
  plan_id_gte?: Maybe<String>;
  plan_id_contains?: Maybe<String>;
  plan_id_not_contains?: Maybe<String>;
  plan_id_starts_with?: Maybe<String>;
  plan_id_not_starts_with?: Maybe<String>;
  plan_id_ends_with?: Maybe<String>;
  plan_id_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isApproved?: Maybe<Boolean>;
  isApproved_not?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  isRecruiter_not?: Maybe<Boolean>;
  phonenumber?: Maybe<String>;
  phonenumber_not?: Maybe<String>;
  phonenumber_in?: Maybe<String[] | String>;
  phonenumber_not_in?: Maybe<String[] | String>;
  phonenumber_lt?: Maybe<String>;
  phonenumber_lte?: Maybe<String>;
  phonenumber_gt?: Maybe<String>;
  phonenumber_gte?: Maybe<String>;
  phonenumber_contains?: Maybe<String>;
  phonenumber_not_contains?: Maybe<String>;
  phonenumber_starts_with?: Maybe<String>;
  phonenumber_not_starts_with?: Maybe<String>;
  phonenumber_ends_with?: Maybe<String>;
  phonenumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface PlanSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlanWhereInput>;
  AND?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  OR?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  NOT?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
}

export interface JobSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobWhereInput>;
  AND?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  OR?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  NOT?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface CvDoctorReplySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CvDoctorReplyWhereInput>;
  AND?: Maybe<
    CvDoctorReplySubscriptionWhereInput[] | CvDoctorReplySubscriptionWhereInput
  >;
  OR?: Maybe<
    CvDoctorReplySubscriptionWhereInput[] | CvDoctorReplySubscriptionWhereInput
  >;
  NOT?: Maybe<
    CvDoctorReplySubscriptionWhereInput[] | CvDoctorReplySubscriptionWhereInput
  >;
}

export interface UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCompanyDataInput;
  create: UserCreateWithoutCompanyInput;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface CompanyUpdateManyMutationInput {
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name?: Maybe<String>;
}

export interface SavedProjectUpdateManyMutationInput {
  project_id?: Maybe<String>;
  user_id?: Maybe<String>;
}

export interface JobApplicationUpdateManyMutationInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  user_id?: Maybe<String>;
}

export interface SavedProjectCreateInput {
  id?: Maybe<ID_Input>;
  project_id?: Maybe<String>;
  project: ProjectCreateOneInput;
  user_id?: Maybe<String>;
  user: UserCreateOneInput;
}

export interface JobApplicationUpdateInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface SavedJobUpdateInput {
  job_id?: Maybe<String>;
  job?: Maybe<JobUpdateOneRequiredInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CvDoctorCreateInput {
  id?: Maybe<ID_Input>;
  attachments?: Maybe<CvFileCreateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserCreateOneInput>;
}

export interface JobWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy_id?: Maybe<String>;
  postedBy_id_not?: Maybe<String>;
  postedBy_id_in?: Maybe<String[] | String>;
  postedBy_id_not_in?: Maybe<String[] | String>;
  postedBy_id_lt?: Maybe<String>;
  postedBy_id_lte?: Maybe<String>;
  postedBy_id_gt?: Maybe<String>;
  postedBy_id_gte?: Maybe<String>;
  postedBy_id_contains?: Maybe<String>;
  postedBy_id_not_contains?: Maybe<String>;
  postedBy_id_starts_with?: Maybe<String>;
  postedBy_id_not_starts_with?: Maybe<String>;
  postedBy_id_ends_with?: Maybe<String>;
  postedBy_id_not_ends_with?: Maybe<String>;
  company_id?: Maybe<String>;
  company_id_not?: Maybe<String>;
  company_id_in?: Maybe<String[] | String>;
  company_id_not_in?: Maybe<String[] | String>;
  company_id_lt?: Maybe<String>;
  company_id_lte?: Maybe<String>;
  company_id_gt?: Maybe<String>;
  company_id_gte?: Maybe<String>;
  company_id_contains?: Maybe<String>;
  company_id_not_contains?: Maybe<String>;
  company_id_starts_with?: Maybe<String>;
  company_id_not_starts_with?: Maybe<String>;
  company_id_ends_with?: Maybe<String>;
  company_id_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  company?: Maybe<CompanyWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  short_description?: Maybe<String>;
  short_description_not?: Maybe<String>;
  short_description_in?: Maybe<String[] | String>;
  short_description_not_in?: Maybe<String[] | String>;
  short_description_lt?: Maybe<String>;
  short_description_lte?: Maybe<String>;
  short_description_gt?: Maybe<String>;
  short_description_gte?: Maybe<String>;
  short_description_contains?: Maybe<String>;
  short_description_not_contains?: Maybe<String>;
  short_description_starts_with?: Maybe<String>;
  short_description_not_starts_with?: Maybe<String>;
  short_description_ends_with?: Maybe<String>;
  short_description_not_ends_with?: Maybe<String>;
  employment_type?: Maybe<String>;
  employment_type_not?: Maybe<String>;
  employment_type_in?: Maybe<String[] | String>;
  employment_type_not_in?: Maybe<String[] | String>;
  employment_type_lt?: Maybe<String>;
  employment_type_lte?: Maybe<String>;
  employment_type_gt?: Maybe<String>;
  employment_type_gte?: Maybe<String>;
  employment_type_contains?: Maybe<String>;
  employment_type_not_contains?: Maybe<String>;
  employment_type_starts_with?: Maybe<String>;
  employment_type_not_starts_with?: Maybe<String>;
  employment_type_ends_with?: Maybe<String>;
  employment_type_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  salary?: Maybe<Float>;
  salary_not?: Maybe<Float>;
  salary_in?: Maybe<Float[] | Float>;
  salary_not_in?: Maybe<Float[] | Float>;
  salary_lt?: Maybe<Float>;
  salary_lte?: Maybe<Float>;
  salary_gt?: Maybe<Float>;
  salary_gte?: Maybe<Float>;
  applications_every?: Maybe<JobApplicationWhereInput>;
  applications_some?: Maybe<JobApplicationWhereInput>;
  applications_none?: Maybe<JobApplicationWhereInput>;
  attachments_every?: Maybe<FileWhereInput>;
  attachments_some?: Maybe<FileWhereInput>;
  attachments_none?: Maybe<FileWhereInput>;
  AND?: Maybe<JobWhereInput[] | JobWhereInput>;
  OR?: Maybe<JobWhereInput[] | JobWhereInput>;
  NOT?: Maybe<JobWhereInput[] | JobWhereInput>;
}

export interface CvFileCreateManyInput {
  create?: Maybe<CvFileCreateInput[] | CvFileCreateInput>;
  connect?: Maybe<CvFileWhereUniqueInput[] | CvFileWhereUniqueInput>;
}

export interface ProjectUpdateManyMutationInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  duration?: Maybe<Int>;
  proposed_budget?: Maybe<Float>;
  paid_budget?: Maybe<Float>;
  requirements?: Maybe<Json>;
}

export interface CvFileCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProjectApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  proposal?: Maybe<String>;
  proposal_not?: Maybe<String>;
  proposal_in?: Maybe<String[] | String>;
  proposal_not_in?: Maybe<String[] | String>;
  proposal_lt?: Maybe<String>;
  proposal_lte?: Maybe<String>;
  proposal_gt?: Maybe<String>;
  proposal_gte?: Maybe<String>;
  proposal_contains?: Maybe<String>;
  proposal_not_contains?: Maybe<String>;
  proposal_starts_with?: Maybe<String>;
  proposal_not_starts_with?: Maybe<String>;
  proposal_ends_with?: Maybe<String>;
  proposal_not_ends_with?: Maybe<String>;
  attachments_every?: Maybe<FileWhereInput>;
  attachments_some?: Maybe<FileWhereInput>;
  attachments_none?: Maybe<FileWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  proposed_budget?: Maybe<Float>;
  proposed_budget_not?: Maybe<Float>;
  proposed_budget_in?: Maybe<Float[] | Float>;
  proposed_budget_not_in?: Maybe<Float[] | Float>;
  proposed_budget_lt?: Maybe<Float>;
  proposed_budget_lte?: Maybe<Float>;
  proposed_budget_gt?: Maybe<Float>;
  proposed_budget_gte?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
  proposed_duration_not?: Maybe<String>;
  proposed_duration_in?: Maybe<String[] | String>;
  proposed_duration_not_in?: Maybe<String[] | String>;
  proposed_duration_lt?: Maybe<String>;
  proposed_duration_lte?: Maybe<String>;
  proposed_duration_gt?: Maybe<String>;
  proposed_duration_gte?: Maybe<String>;
  proposed_duration_contains?: Maybe<String>;
  proposed_duration_not_contains?: Maybe<String>;
  proposed_duration_starts_with?: Maybe<String>;
  proposed_duration_not_starts_with?: Maybe<String>;
  proposed_duration_ends_with?: Maybe<String>;
  proposed_duration_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectApplicationWhereInput[] | ProjectApplicationWhereInput>;
  OR?: Maybe<ProjectApplicationWhereInput[] | ProjectApplicationWhereInput>;
  NOT?: Maybe<ProjectApplicationWhereInput[] | ProjectApplicationWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyCreateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy_id?: Maybe<String>;
  postedBy_id_not?: Maybe<String>;
  postedBy_id_in?: Maybe<String[] | String>;
  postedBy_id_not_in?: Maybe<String[] | String>;
  postedBy_id_lt?: Maybe<String>;
  postedBy_id_lte?: Maybe<String>;
  postedBy_id_gt?: Maybe<String>;
  postedBy_id_gte?: Maybe<String>;
  postedBy_id_contains?: Maybe<String>;
  postedBy_id_not_contains?: Maybe<String>;
  postedBy_id_starts_with?: Maybe<String>;
  postedBy_id_not_starts_with?: Maybe<String>;
  postedBy_id_ends_with?: Maybe<String>;
  postedBy_id_not_ends_with?: Maybe<String>;
  company_id?: Maybe<String>;
  company_id_not?: Maybe<String>;
  company_id_in?: Maybe<String[] | String>;
  company_id_not_in?: Maybe<String[] | String>;
  company_id_lt?: Maybe<String>;
  company_id_lte?: Maybe<String>;
  company_id_gt?: Maybe<String>;
  company_id_gte?: Maybe<String>;
  company_id_contains?: Maybe<String>;
  company_id_not_contains?: Maybe<String>;
  company_id_starts_with?: Maybe<String>;
  company_id_not_starts_with?: Maybe<String>;
  company_id_ends_with?: Maybe<String>;
  company_id_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  company?: Maybe<CompanyWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  short_description?: Maybe<String>;
  short_description_not?: Maybe<String>;
  short_description_in?: Maybe<String[] | String>;
  short_description_not_in?: Maybe<String[] | String>;
  short_description_lt?: Maybe<String>;
  short_description_lte?: Maybe<String>;
  short_description_gt?: Maybe<String>;
  short_description_gte?: Maybe<String>;
  short_description_contains?: Maybe<String>;
  short_description_not_contains?: Maybe<String>;
  short_description_starts_with?: Maybe<String>;
  short_description_not_starts_with?: Maybe<String>;
  short_description_ends_with?: Maybe<String>;
  short_description_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  proposed_budget?: Maybe<Float>;
  proposed_budget_not?: Maybe<Float>;
  proposed_budget_in?: Maybe<Float[] | Float>;
  proposed_budget_not_in?: Maybe<Float[] | Float>;
  proposed_budget_lt?: Maybe<Float>;
  proposed_budget_lte?: Maybe<Float>;
  proposed_budget_gt?: Maybe<Float>;
  proposed_budget_gte?: Maybe<Float>;
  paid_budget?: Maybe<Float>;
  paid_budget_not?: Maybe<Float>;
  paid_budget_in?: Maybe<Float[] | Float>;
  paid_budget_not_in?: Maybe<Float[] | Float>;
  paid_budget_lt?: Maybe<Float>;
  paid_budget_lte?: Maybe<Float>;
  paid_budget_gt?: Maybe<Float>;
  paid_budget_gte?: Maybe<Float>;
  attachments_every?: Maybe<FileWhereInput>;
  attachments_some?: Maybe<FileWhereInput>;
  attachments_none?: Maybe<FileWhereInput>;
  applications_every?: Maybe<ProjectApplicationWhereInput>;
  applications_some?: Maybe<ProjectApplicationWhereInput>;
  applications_none?: Maybe<ProjectApplicationWhereInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface CvDoctorUpdateInput {
  attachments?: Maybe<CvFileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface PlanUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  description?: Maybe<String>;
  category?: Maybe<Int>;
}

export interface CvFileUpdateManyInput {
  create?: Maybe<CvFileCreateInput[] | CvFileCreateInput>;
  update?: Maybe<
    | CvFileUpdateWithWhereUniqueNestedInput[]
    | CvFileUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CvFileUpsertWithWhereUniqueNestedInput[]
    | CvFileUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CvFileWhereUniqueInput[] | CvFileWhereUniqueInput>;
  connect?: Maybe<CvFileWhereUniqueInput[] | CvFileWhereUniqueInput>;
  set?: Maybe<CvFileWhereUniqueInput[] | CvFileWhereUniqueInput>;
  disconnect?: Maybe<CvFileWhereUniqueInput[] | CvFileWhereUniqueInput>;
  deleteMany?: Maybe<CvFileScalarWhereInput[] | CvFileScalarWhereInput>;
  updateMany?: Maybe<
    | CvFileUpdateManyWithWhereNestedInput[]
    | CvFileUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutNotificationsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
}

export interface CvFileUpdateWithWhereUniqueNestedInput {
  where: CvFileWhereUniqueInput;
  data: CvFileUpdateDataInput;
}

export interface NotificationUpdateInput {
  type?: Maybe<NOTIFICATION_TYPE>;
  user?: Maybe<UserUpdateOneWithoutNotificationsInput>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface CvFileUpdateDataInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<NOTIFICATION_TYPE>;
  user?: Maybe<UserCreateOneWithoutNotificationsInput>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface CvFileUpsertWithWhereUniqueNestedInput {
  where: CvFileWhereUniqueInput;
  update: CvFileUpdateDataInput;
  create: CvFileCreateInput;
}

export interface JobUpsertNestedInput {
  update: JobUpdateDataInput;
  create: JobCreateInput;
}

export interface CvFileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  secret?: Maybe<String>;
  secret_not?: Maybe<String>;
  secret_in?: Maybe<String[] | String>;
  secret_not_in?: Maybe<String[] | String>;
  secret_lt?: Maybe<String>;
  secret_lte?: Maybe<String>;
  secret_gt?: Maybe<String>;
  secret_gte?: Maybe<String>;
  secret_contains?: Maybe<String>;
  secret_not_contains?: Maybe<String>;
  secret_starts_with?: Maybe<String>;
  secret_not_starts_with?: Maybe<String>;
  secret_ends_with?: Maybe<String>;
  secret_not_ends_with?: Maybe<String>;
  contentType?: Maybe<String>;
  contentType_not?: Maybe<String>;
  contentType_in?: Maybe<String[] | String>;
  contentType_not_in?: Maybe<String[] | String>;
  contentType_lt?: Maybe<String>;
  contentType_lte?: Maybe<String>;
  contentType_gt?: Maybe<String>;
  contentType_gte?: Maybe<String>;
  contentType_contains?: Maybe<String>;
  contentType_not_contains?: Maybe<String>;
  contentType_starts_with?: Maybe<String>;
  contentType_not_starts_with?: Maybe<String>;
  contentType_ends_with?: Maybe<String>;
  contentType_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<CvFileScalarWhereInput[] | CvFileScalarWhereInput>;
  OR?: Maybe<CvFileScalarWhereInput[] | CvFileScalarWhereInput>;
  NOT?: Maybe<CvFileScalarWhereInput[] | CvFileScalarWhereInput>;
}

export interface ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput;
  create: ProjectCreateInput;
}

export interface CvFileUpdateManyWithWhereNestedInput {
  where: CvFileScalarWhereInput;
  data: CvFileUpdateManyDataInput;
}

export interface ProjectApplicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  proposal?: Maybe<String>;
  proposal_not?: Maybe<String>;
  proposal_in?: Maybe<String[] | String>;
  proposal_not_in?: Maybe<String[] | String>;
  proposal_lt?: Maybe<String>;
  proposal_lte?: Maybe<String>;
  proposal_gt?: Maybe<String>;
  proposal_gte?: Maybe<String>;
  proposal_contains?: Maybe<String>;
  proposal_not_contains?: Maybe<String>;
  proposal_starts_with?: Maybe<String>;
  proposal_not_starts_with?: Maybe<String>;
  proposal_ends_with?: Maybe<String>;
  proposal_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  proposed_budget?: Maybe<Float>;
  proposed_budget_not?: Maybe<Float>;
  proposed_budget_in?: Maybe<Float[] | Float>;
  proposed_budget_not_in?: Maybe<Float[] | Float>;
  proposed_budget_lt?: Maybe<Float>;
  proposed_budget_lte?: Maybe<Float>;
  proposed_budget_gt?: Maybe<Float>;
  proposed_budget_gte?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
  proposed_duration_not?: Maybe<String>;
  proposed_duration_in?: Maybe<String[] | String>;
  proposed_duration_not_in?: Maybe<String[] | String>;
  proposed_duration_lt?: Maybe<String>;
  proposed_duration_lte?: Maybe<String>;
  proposed_duration_gt?: Maybe<String>;
  proposed_duration_gte?: Maybe<String>;
  proposed_duration_contains?: Maybe<String>;
  proposed_duration_not_contains?: Maybe<String>;
  proposed_duration_starts_with?: Maybe<String>;
  proposed_duration_not_starts_with?: Maybe<String>;
  proposed_duration_ends_with?: Maybe<String>;
  proposed_duration_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ProjectApplicationScalarWhereInput[] | ProjectApplicationScalarWhereInput
  >;
  OR?: Maybe<
    ProjectApplicationScalarWhereInput[] | ProjectApplicationScalarWhereInput
  >;
  NOT?: Maybe<
    ProjectApplicationScalarWhereInput[] | ProjectApplicationScalarWhereInput
  >;
}

export interface CvFileUpdateManyDataInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ProjectApplicationUpdateWithWhereUniqueNestedInput {
  where: ProjectApplicationWhereUniqueInput;
  data: ProjectApplicationUpdateDataInput;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SavedProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  project_id?: Maybe<String>;
  project_id_not?: Maybe<String>;
  project_id_in?: Maybe<String[] | String>;
  project_id_not_in?: Maybe<String[] | String>;
  project_id_lt?: Maybe<String>;
  project_id_lte?: Maybe<String>;
  project_id_gt?: Maybe<String>;
  project_id_gte?: Maybe<String>;
  project_id_contains?: Maybe<String>;
  project_id_not_contains?: Maybe<String>;
  project_id_starts_with?: Maybe<String>;
  project_id_not_starts_with?: Maybe<String>;
  project_id_ends_with?: Maybe<String>;
  project_id_not_ends_with?: Maybe<String>;
  project?: Maybe<ProjectWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SavedProjectWhereInput[] | SavedProjectWhereInput>;
  OR?: Maybe<SavedProjectWhereInput[] | SavedProjectWhereInput>;
  NOT?: Maybe<SavedProjectWhereInput[] | SavedProjectWhereInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface JobCreateOneInput {
  create?: Maybe<JobCreateInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  postedBy_id: String;
  company_id: String;
  postedBy?: Maybe<UserCreateOneInput>;
  company?: Maybe<CompanyCreateOneInput>;
  title: String;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  duration?: Maybe<Int>;
  proposed_budget?: Maybe<Float>;
  paid_budget?: Maybe<Float>;
  attachments?: Maybe<FileCreateManyInput>;
  requirements?: Maybe<Json>;
  applications?: Maybe<ProjectApplicationCreateManyInput>;
}

export interface CvDoctorUpdateManyMutationInput {
  user_id?: Maybe<String>;
}

export interface UserCreateWithoutCompanyInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface CvDoctorReplyCreateInput {
  id?: Maybe<ID_Input>;
  attachments?: Maybe<CvFileCreateManyInput>;
  request?: Maybe<CvDoctorCreateOneInput>;
  request_id: String;
  postedBy_id?: Maybe<String>;
  postedBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface CvDoctorCreateOneInput {
  create?: Maybe<CvDoctorCreateInput>;
  connect?: Maybe<CvDoctorWhereUniqueInput>;
}

export interface CvDoctorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  attachments_every?: Maybe<CvFileWhereInput>;
  attachments_some?: Maybe<CvFileWhereInput>;
  attachments_none?: Maybe<CvFileWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CvDoctorWhereInput[] | CvDoctorWhereInput>;
  OR?: Maybe<CvDoctorWhereInput[] | CvDoctorWhereInput>;
  NOT?: Maybe<CvDoctorWhereInput[] | CvDoctorWhereInput>;
}

export interface CvDoctorReplyUpdateInput {
  attachments?: Maybe<CvFileUpdateManyInput>;
  request?: Maybe<CvDoctorUpdateOneInput>;
  request_id?: Maybe<String>;
  postedBy_id?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneInput>;
}

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  how_hear?: Maybe<String>;
  how_hear_not?: Maybe<String>;
  how_hear_in?: Maybe<String[] | String>;
  how_hear_not_in?: Maybe<String[] | String>;
  how_hear_lt?: Maybe<String>;
  how_hear_lte?: Maybe<String>;
  how_hear_gt?: Maybe<String>;
  how_hear_gte?: Maybe<String>;
  how_hear_contains?: Maybe<String>;
  how_hear_not_contains?: Maybe<String>;
  how_hear_starts_with?: Maybe<String>;
  how_hear_not_starts_with?: Maybe<String>;
  how_hear_ends_with?: Maybe<String>;
  how_hear_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  recruiters_every?: Maybe<UserWhereInput>;
  recruiters_some?: Maybe<UserWhereInput>;
  recruiters_none?: Maybe<UserWhereInput>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface CvDoctorUpdateOneInput {
  create?: Maybe<CvDoctorCreateInput>;
  update?: Maybe<CvDoctorUpdateDataInput>;
  upsert?: Maybe<CvDoctorUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CvDoctorWhereUniqueInput>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  url?: Maybe<String>;
}>;

export interface CvDoctorUpdateDataInput {
  attachments?: Maybe<CvFileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface PlanWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<Int>;
  category_not?: Maybe<Int>;
  category_in?: Maybe<Int[] | Int>;
  category_not_in?: Maybe<Int[] | Int>;
  category_lt?: Maybe<Int>;
  category_lte?: Maybe<Int>;
  category_gt?: Maybe<Int>;
  category_gte?: Maybe<Int>;
  AND?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  OR?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  NOT?: Maybe<PlanWhereInput[] | PlanWhereInput>;
}

export interface CvDoctorUpsertNestedInput {
  update: CvDoctorUpdateDataInput;
  create: CvDoctorCreateInput;
}

export interface ProjectUpdateInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneInput>;
  company?: Maybe<CompanyUpdateOneInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  duration?: Maybe<Int>;
  proposed_budget?: Maybe<Float>;
  paid_budget?: Maybe<Float>;
  attachments?: Maybe<FileUpdateManyInput>;
  requirements?: Maybe<Json>;
  applications?: Maybe<ProjectApplicationUpdateManyInput>;
}

export interface CvDoctorReplyUpdateManyMutationInput {
  request_id?: Maybe<String>;
  postedBy_id?: Maybe<String>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies: Json;
  student_confirm?: Maybe<FileCreateOneInput>;
  photo_url?: Maybe<FileCreateManyInput>;
  signup_reason: String;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear: String;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id: String;
  plan?: Maybe<PlanCreateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyCreateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserCreateManyWithoutFollowersInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface CvFileUpdateInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface NotificationUpdateManyMutationInput {
  type?: Maybe<NOTIFICATION_TYPE>;
  link?: Maybe<String>;
  readDate?: Maybe<DateTimeInput>;
}

export interface CvFileUpdateManyMutationInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileUpdateInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface JobUpdateOneInput {
  create?: Maybe<JobCreateInput>;
  update?: Maybe<JobUpdateDataInput>;
  upsert?: Maybe<JobUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface FileUpdateManyMutationInput {
  name?: Maybe<String>;
  size?: Maybe<Int>;
  secret?: Maybe<String>;
  contentType?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ProjectApplicationUpsertWithWhereUniqueNestedInput {
  where: ProjectApplicationWhereUniqueInput;
  update: ProjectApplicationUpdateDataInput;
  create: ProjectApplicationCreateInput;
}

export interface JobCreateInput {
  id?: Maybe<ID_Input>;
  postedBy_id: String;
  company_id: String;
  postedBy?: Maybe<UserCreateOneInput>;
  company?: Maybe<CompanyCreateOneInput>;
  title: String;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  employment_type: String;
  type?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Float>;
  applications?: Maybe<JobApplicationCreateManyInput>;
  attachments?: Maybe<FileCreateManyInput>;
  requirements?: Maybe<Json>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CompanyCreateOneInput {
  create?: Maybe<CompanyCreateInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name: String;
  recruiters?: Maybe<UserCreateManyWithoutCompanyInput>;
}

export interface JobApplicationCreateManyInput {
  create?: Maybe<JobApplicationCreateInput[] | JobApplicationCreateInput>;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface JobApplicationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileCreateManyInput>;
  user_id: String;
  user?: Maybe<UserCreateOneInput>;
}

export type CvFileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  url?: Maybe<String>;
}>;

export interface JobUpdateInput {
  postedBy_id?: Maybe<String>;
  company_id?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneInput>;
  company?: Maybe<CompanyUpdateOneInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  short_description?: Maybe<String>;
  employment_type?: Maybe<String>;
  type?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Float>;
  applications?: Maybe<JobApplicationUpdateManyInput>;
  attachments?: Maybe<FileUpdateManyInput>;
  requirements?: Maybe<Json>;
}

export interface ProjectApplicationUpdateManyMutationInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  user_id?: Maybe<String>;
  proposed_budget?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
}

export interface CompanyUpdateOneInput {
  create?: Maybe<CompanyCreateInput>;
  update?: Maybe<CompanyUpdateDataInput>;
  upsert?: Maybe<CompanyUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content?: Maybe<String>;
  author: UserCreateOneWithoutPostsInput;
}

export interface CompanyUpdateDataInput {
  address?: Maybe<String>;
  logo?: Maybe<String>;
  how_hear?: Maybe<String>;
  name?: Maybe<String>;
  recruiters?: Maybe<UserUpdateManyWithoutCompanyInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export type SavedProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface JobApplicationUpdateManyInput {
  create?: Maybe<JobApplicationCreateInput[] | JobApplicationCreateInput>;
  update?: Maybe<
    | JobApplicationUpdateWithWhereUniqueNestedInput[]
    | JobApplicationUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | JobApplicationUpsertWithWhereUniqueNestedInput[]
    | JobApplicationUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  set?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  disconnect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  deleteMany?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | JobApplicationUpdateManyWithWhereNestedInput[]
    | JobApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface JobApplicationUpdateWithWhereUniqueNestedInput {
  where: JobApplicationWhereUniqueInput;
  data: JobApplicationUpdateDataInput;
}

export type JobWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface JobApplicationUpdateDataInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileUpdateManyInput>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  secret?: Maybe<String>;
  secret_not?: Maybe<String>;
  secret_in?: Maybe<String[] | String>;
  secret_not_in?: Maybe<String[] | String>;
  secret_lt?: Maybe<String>;
  secret_lte?: Maybe<String>;
  secret_gt?: Maybe<String>;
  secret_gte?: Maybe<String>;
  secret_contains?: Maybe<String>;
  secret_not_contains?: Maybe<String>;
  secret_starts_with?: Maybe<String>;
  secret_not_starts_with?: Maybe<String>;
  secret_ends_with?: Maybe<String>;
  secret_not_ends_with?: Maybe<String>;
  contentType?: Maybe<String>;
  contentType_not?: Maybe<String>;
  contentType_in?: Maybe<String[] | String>;
  contentType_not_in?: Maybe<String[] | String>;
  contentType_lt?: Maybe<String>;
  contentType_lte?: Maybe<String>;
  contentType_gt?: Maybe<String>;
  contentType_gte?: Maybe<String>;
  contentType_contains?: Maybe<String>;
  contentType_not_contains?: Maybe<String>;
  contentType_starts_with?: Maybe<String>;
  contentType_not_starts_with?: Maybe<String>;
  contentType_ends_with?: Maybe<String>;
  contentType_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface JobApplicationUpdateManyDataInput {
  title?: Maybe<String>;
  proposal?: Maybe<String>;
  user_id?: Maybe<String>;
}

export interface JobApplicationUpdateManyWithWhereNestedInput {
  where: JobApplicationScalarWhereInput;
  data: JobApplicationUpdateManyDataInput;
}

export interface JobApplicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  proposal?: Maybe<String>;
  proposal_not?: Maybe<String>;
  proposal_in?: Maybe<String[] | String>;
  proposal_not_in?: Maybe<String[] | String>;
  proposal_lt?: Maybe<String>;
  proposal_lte?: Maybe<String>;
  proposal_gt?: Maybe<String>;
  proposal_gte?: Maybe<String>;
  proposal_contains?: Maybe<String>;
  proposal_not_contains?: Maybe<String>;
  proposal_starts_with?: Maybe<String>;
  proposal_not_starts_with?: Maybe<String>;
  proposal_ends_with?: Maybe<String>;
  proposal_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
  OR?: Maybe<JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput>;
  NOT?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
}

export interface JobApplicationUpsertWithWhereUniqueNestedInput {
  where: JobApplicationWhereUniqueInput;
  update: JobApplicationUpdateDataInput;
  create: JobApplicationCreateInput;
}

export interface ProjectApplicationUpdateManyWithWhereNestedInput {
  where: ProjectApplicationScalarWhereInput;
  data: ProjectApplicationUpdateManyDataInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  home_address?: Maybe<String>;
  utc_number?: Maybe<String>;
  hobbies?: Maybe<Json>;
  student_confirm?: Maybe<FileUpdateOneInput>;
  photo_url?: Maybe<FileUpdateManyInput>;
  signup_reason?: Maybe<String>;
  uk_citizen?: Maybe<Boolean>;
  legal_right?: Maybe<Boolean>;
  how_hear?: Maybe<String>;
  user_type?: Maybe<Int>;
  languages?: Maybe<Json>;
  education_level?: Maybe<Json>;
  job_title?: Maybe<String>;
  plan_id?: Maybe<String>;
  plan?: Maybe<PlanUpdateOneInput>;
  isApproved?: Maybe<Boolean>;
  isRecruiter?: Maybe<Boolean>;
  company?: Maybe<CompanyUpdateOneWithoutRecruitersInput>;
  degree_profile?: Maybe<Json>;
  phonenumber?: Maybe<String>;
  followers?: Maybe<UserUpdateManyWithoutFollowersInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface CvFileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CvFileWhereInput>;
  AND?: Maybe<CvFileSubscriptionWhereInput[] | CvFileSubscriptionWhereInput>;
  OR?: Maybe<CvFileSubscriptionWhereInput[] | CvFileSubscriptionWhereInput>;
  NOT?: Maybe<CvFileSubscriptionWhereInput[] | CvFileSubscriptionWhereInput>;
}

export interface ProjectApplicationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  proposal?: Maybe<String>;
  attachments?: Maybe<FileCreateManyInput>;
  user_id: String;
  user?: Maybe<UserCreateOneInput>;
  proposed_budget?: Maybe<Float>;
  proposed_duration?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  first_name?: String;
  last_name?: String;
  dob?: DateTimeOutput;
  home_address?: String;
  utc_number?: String;
  hobbies: Json;
  signup_reason: String;
  uk_citizen: Boolean;
  legal_right: Boolean;
  how_hear: String;
  user_type?: Int;
  languages?: Json;
  education_level?: Json;
  job_title?: String;
  plan_id: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isApproved?: Boolean;
  isRecruiter?: Boolean;
  degree_profile?: Json;
  phonenumber?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  home_address: () => Promise<String>;
  utc_number: () => Promise<String>;
  hobbies: () => Promise<Json>;
  signup_reason: () => Promise<String>;
  uk_citizen: () => Promise<Boolean>;
  legal_right: () => Promise<Boolean>;
  how_hear: () => Promise<String>;
  user_type: () => Promise<Int>;
  languages: () => Promise<Json>;
  education_level: () => Promise<Json>;
  job_title: () => Promise<String>;
  plan_id: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isApproved: () => Promise<Boolean>;
  isRecruiter: () => Promise<Boolean>;
  degree_profile: () => Promise<Json>;
  phonenumber: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  home_address: () => Promise<AsyncIterator<String>>;
  utc_number: () => Promise<AsyncIterator<String>>;
  hobbies: () => Promise<AsyncIterator<Json>>;
  signup_reason: () => Promise<AsyncIterator<String>>;
  uk_citizen: () => Promise<AsyncIterator<Boolean>>;
  legal_right: () => Promise<AsyncIterator<Boolean>>;
  how_hear: () => Promise<AsyncIterator<String>>;
  user_type: () => Promise<AsyncIterator<Int>>;
  languages: () => Promise<AsyncIterator<Json>>;
  education_level: () => Promise<AsyncIterator<Json>>;
  job_title: () => Promise<AsyncIterator<String>>;
  plan_id: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isApproved: () => Promise<AsyncIterator<Boolean>>;
  isRecruiter: () => Promise<AsyncIterator<Boolean>>;
  degree_profile: () => Promise<AsyncIterator<Json>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCvFile {
  count: Int;
}

export interface AggregateCvFilePromise
  extends Promise<AggregateCvFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCvFileSubscription
  extends Promise<AsyncIterator<AggregateCvFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content?: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface CvFileEdge {
  node: CvFile;
  cursor: String;
}

export interface CvFileEdgePromise extends Promise<CvFileEdge>, Fragmentable {
  node: <T = CvFilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CvFileEdgeSubscription
  extends Promise<AsyncIterator<CvFileEdge>>,
    Fragmentable {
  node: <T = CvFileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Plan {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  price?: Int;
  description?: String;
  category: Int;
}

export interface PlanPromise extends Promise<Plan>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  category: () => Promise<Int>;
}

export interface PlanSubscription
  extends Promise<AsyncIterator<Plan>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Int>>;
}

export interface PlanNullablePromise
  extends Promise<Plan | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  category: () => Promise<Int>;
}

export interface CvFileConnection {
  pageInfo: PageInfo;
  edges: CvFileEdge[];
}

export interface CvFileConnectionPromise
  extends Promise<CvFileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CvFileEdge>>() => T;
  aggregate: <T = AggregateCvFilePromise>() => T;
}

export interface CvFileConnectionSubscription
  extends Promise<AsyncIterator<CvFileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CvFileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCvFileSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCvDoctorReply {
  count: Int;
}

export interface AggregateCvDoctorReplyPromise
  extends Promise<AggregateCvDoctorReply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCvDoctorReplySubscription
  extends Promise<AsyncIterator<AggregateCvDoctorReply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CvDoctorReplyEdge {
  node: CvDoctorReply;
  cursor: String;
}

export interface CvDoctorReplyEdgePromise
  extends Promise<CvDoctorReplyEdge>,
    Fragmentable {
  node: <T = CvDoctorReplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CvDoctorReplyEdgeSubscription
  extends Promise<AsyncIterator<CvDoctorReplyEdge>>,
    Fragmentable {
  node: <T = CvDoctorReplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SavedProjectEdge {
  node: SavedProject;
  cursor: String;
}

export interface SavedProjectEdgePromise
  extends Promise<SavedProjectEdge>,
    Fragmentable {
  node: <T = SavedProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SavedProjectEdgeSubscription
  extends Promise<AsyncIterator<SavedProjectEdge>>,
    Fragmentable {
  node: <T = SavedProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SavedJobSubscriptionPayload {
  mutation: MutationType;
  node: SavedJob;
  updatedFields: String[];
  previousValues: SavedJobPreviousValues;
}

export interface SavedJobSubscriptionPayloadPromise
  extends Promise<SavedJobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SavedJobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SavedJobPreviousValuesPromise>() => T;
}

export interface SavedJobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SavedJobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SavedJobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SavedJobPreviousValuesSubscription>() => T;
}

export interface AggregateSavedProject {
  count: Int;
}

export interface AggregateSavedProjectPromise
  extends Promise<AggregateSavedProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSavedProjectSubscription
  extends Promise<AsyncIterator<AggregateSavedProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Company {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  address?: String;
  logo?: String;
  how_hear?: String;
  name: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  logo: () => Promise<String>;
  how_hear: () => Promise<String>;
  name: () => Promise<String>;
  recruiters: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  address: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  how_hear: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  recruiters: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  logo: () => Promise<String>;
  how_hear: () => Promise<String>;
  name: () => Promise<String>;
  recruiters: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SavedProjectConnection {
  pageInfo: PageInfo;
  edges: SavedProjectEdge[];
}

export interface SavedProjectConnectionPromise
  extends Promise<SavedProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SavedProjectEdge>>() => T;
  aggregate: <T = AggregateSavedProjectPromise>() => T;
}

export interface SavedProjectConnectionSubscription
  extends Promise<AsyncIterator<SavedProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SavedProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSavedProjectSubscription>() => T;
}

export interface SavedJobEdge {
  node: SavedJob;
  cursor: String;
}

export interface SavedJobEdgePromise
  extends Promise<SavedJobEdge>,
    Fragmentable {
  node: <T = SavedJobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SavedJobEdgeSubscription
  extends Promise<AsyncIterator<SavedJobEdge>>,
    Fragmentable {
  node: <T = SavedJobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SavedProject {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  project_id?: String;
  user_id?: String;
}

export interface SavedProjectPromise
  extends Promise<SavedProject>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  project_id: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface SavedProjectSubscription
  extends Promise<AsyncIterator<SavedProject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project_id: () => Promise<AsyncIterator<String>>;
  project: <T = ProjectSubscription>() => T;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface SavedProjectNullablePromise
  extends Promise<SavedProject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  project_id: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface AggregateProjectApplication {
  count: Int;
}

export interface AggregateProjectApplicationPromise
  extends Promise<AggregateProjectApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectApplicationSubscription
  extends Promise<AsyncIterator<AggregateProjectApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  address?: String;
  logo?: String;
  how_hear?: String;
  name: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  address: () => Promise<String>;
  logo: () => Promise<String>;
  how_hear: () => Promise<String>;
  name: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  address: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  how_hear: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProjectApplicationConnection {
  pageInfo: PageInfo;
  edges: ProjectApplicationEdge[];
}

export interface ProjectApplicationConnectionPromise
  extends Promise<ProjectApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectApplicationEdge>>() => T;
  aggregate: <T = AggregateProjectApplicationPromise>() => T;
}

export interface ProjectApplicationConnectionSubscription
  extends Promise<AsyncIterator<ProjectApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ProjectApplicationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProjectApplicationSubscription>() => T;
}

export interface CvDoctorReplyConnection {
  pageInfo: PageInfo;
  edges: CvDoctorReplyEdge[];
}

export interface CvDoctorReplyConnectionPromise
  extends Promise<CvDoctorReplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CvDoctorReplyEdge>>() => T;
  aggregate: <T = AggregateCvDoctorReplyPromise>() => T;
}

export interface CvDoctorReplyConnectionSubscription
  extends Promise<AsyncIterator<CvDoctorReplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CvDoctorReplyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCvDoctorReplySubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CvDoctorSubscriptionPayload {
  mutation: MutationType;
  node: CvDoctor;
  updatedFields: String[];
  previousValues: CvDoctorPreviousValues;
}

export interface CvDoctorSubscriptionPayloadPromise
  extends Promise<CvDoctorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CvDoctorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CvDoctorPreviousValuesPromise>() => T;
}

export interface CvDoctorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CvDoctorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CvDoctorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CvDoctorPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CvDoctorPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  user_id?: String;
}

export interface CvDoctorPreviousValuesPromise
  extends Promise<CvDoctorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user_id: () => Promise<String>;
}

export interface CvDoctorPreviousValuesSubscription
  extends Promise<AsyncIterator<CvDoctorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user_id: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface CvDoctorReply {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  request_id: String;
  postedBy_id?: String;
}

export interface CvDoctorReplyPromise
  extends Promise<CvDoctorReply>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  attachments: <T = FragmentableArray<CvFile>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  request: <T = CvDoctorPromise>() => T;
  request_id: () => Promise<String>;
  postedBy_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface CvDoctorReplySubscription
  extends Promise<AsyncIterator<CvDoctorReply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  attachments: <T = Promise<AsyncIterator<CvFileSubscription>>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  request: <T = CvDoctorSubscription>() => T;
  request_id: () => Promise<AsyncIterator<String>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
}

export interface CvDoctorReplyNullablePromise
  extends Promise<CvDoctorReply | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  attachments: <T = FragmentableArray<CvFile>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  request: <T = CvDoctorPromise>() => T;
  request_id: () => Promise<String>;
  postedBy_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface PlanEdge {
  node: Plan;
  cursor: String;
}

export interface PlanEdgePromise extends Promise<PlanEdge>, Fragmentable {
  node: <T = PlanPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlanEdgeSubscription
  extends Promise<AsyncIterator<PlanEdge>>,
    Fragmentable {
  node: <T = PlanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CvDoctorReplySubscriptionPayload {
  mutation: MutationType;
  node: CvDoctorReply;
  updatedFields: String[];
  previousValues: CvDoctorReplyPreviousValues;
}

export interface CvDoctorReplySubscriptionPayloadPromise
  extends Promise<CvDoctorReplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CvDoctorReplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CvDoctorReplyPreviousValuesPromise>() => T;
}

export interface CvDoctorReplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CvDoctorReplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CvDoctorReplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CvDoctorReplyPreviousValuesSubscription>() => T;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CvDoctorReplyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  request_id: String;
  postedBy_id?: String;
}

export interface CvDoctorReplyPreviousValuesPromise
  extends Promise<CvDoctorReplyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  request_id: () => Promise<String>;
  postedBy_id: () => Promise<String>;
}

export interface CvDoctorReplyPreviousValuesSubscription
  extends Promise<AsyncIterator<CvDoctorReplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  request_id: () => Promise<AsyncIterator<String>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface AggregateCvDoctor {
  count: Int;
}

export interface AggregateCvDoctorPromise
  extends Promise<AggregateCvDoctor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCvDoctorSubscription
  extends Promise<AsyncIterator<AggregateCvDoctor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CvFileSubscriptionPayload {
  mutation: MutationType;
  node: CvFile;
  updatedFields: String[];
  previousValues: CvFilePreviousValues;
}

export interface CvFileSubscriptionPayloadPromise
  extends Promise<CvFileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CvFilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CvFilePreviousValuesPromise>() => T;
}

export interface CvFileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CvFileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CvFileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CvFilePreviousValuesSubscription>() => T;
}

export interface File {
  id: ID_Output;
  name?: String;
  size?: Int;
  secret?: String;
  contentType?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  secret: () => Promise<AsyncIterator<String>>;
  contentType: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface CvFilePreviousValues {
  id: ID_Output;
  name?: String;
  size?: Int;
  secret?: String;
  contentType?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface CvFilePreviousValuesPromise
  extends Promise<CvFilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface CvFilePreviousValuesSubscription
  extends Promise<AsyncIterator<CvFilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  secret: () => Promise<AsyncIterator<String>>;
  contentType: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface SavedProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  project_id?: String;
  user_id?: String;
}

export interface SavedProjectPreviousValuesPromise
  extends Promise<SavedProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  project_id: () => Promise<String>;
  user_id: () => Promise<String>;
}

export interface SavedProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SavedProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project_id: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
}

export interface CvDoctorEdge {
  node: CvDoctor;
  cursor: String;
}

export interface CvDoctorEdgePromise
  extends Promise<CvDoctorEdge>,
    Fragmentable {
  node: <T = CvDoctorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CvDoctorEdgeSubscription
  extends Promise<AsyncIterator<CvDoctorEdge>>,
    Fragmentable {
  node: <T = CvDoctorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  deliveredAt?: DateTimeOutput;
  readAt?: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  deliveredAt: () => Promise<DateTimeOutput>;
  readAt: () => Promise<DateTimeOutput>;
  project: <T = ProjectPromise>() => T;
  job: <T = JobPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  deliveredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  project: <T = ProjectSubscription>() => T;
  job: <T = JobSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  deliveredAt: () => Promise<DateTimeOutput>;
  readAt: () => Promise<DateTimeOutput>;
  project: <T = ProjectPromise>() => T;
  job: <T = JobPromise>() => T;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface JobApplicationEdge {
  node: JobApplication;
  cursor: String;
}

export interface JobApplicationEdgePromise
  extends Promise<JobApplicationEdge>,
    Fragmentable {
  node: <T = JobApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobApplicationEdgeSubscription
  extends Promise<AsyncIterator<JobApplicationEdge>>,
    Fragmentable {
  node: <T = JobApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FilePreviousValues {
  id: ID_Output;
  name?: String;
  size?: Int;
  secret?: String;
  contentType?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  secret: () => Promise<AsyncIterator<String>>;
  contentType: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJob {
  count: Int;
}

export interface AggregateJobPromise
  extends Promise<AggregateJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobSubscription
  extends Promise<AsyncIterator<AggregateJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CvDoctorConnection {
  pageInfo: PageInfo;
  edges: CvDoctorEdge[];
}

export interface CvDoctorConnectionPromise
  extends Promise<CvDoctorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CvDoctorEdge>>() => T;
  aggregate: <T = AggregateCvDoctorPromise>() => T;
}

export interface CvDoctorConnectionSubscription
  extends Promise<AsyncIterator<CvDoctorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CvDoctorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCvDoctorSubscription>() => T;
}

export interface JobConnection {
  pageInfo: PageInfo;
  edges: JobEdge[];
}

export interface JobConnectionPromise
  extends Promise<JobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobEdge>>() => T;
  aggregate: <T = AggregateJobPromise>() => T;
}

export interface JobConnectionSubscription
  extends Promise<AsyncIterator<JobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobSubscription>() => T;
}

export interface JobSubscriptionPayload {
  mutation: MutationType;
  node: Job;
  updatedFields: String[];
  previousValues: JobPreviousValues;
}

export interface JobSubscriptionPayloadPromise
  extends Promise<JobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobPreviousValuesPromise>() => T;
}

export interface JobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobPreviousValuesSubscription>() => T;
}

export interface SavedProjectSubscriptionPayload {
  mutation: MutationType;
  node: SavedProject;
  updatedFields: String[];
  previousValues: SavedProjectPreviousValues;
}

export interface SavedProjectSubscriptionPayloadPromise
  extends Promise<SavedProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SavedProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SavedProjectPreviousValuesPromise>() => T;
}

export interface SavedProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SavedProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SavedProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SavedProjectPreviousValuesSubscription>() => T;
}

export interface JobPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  postedBy_id: String;
  company_id: String;
  title: String;
  description?: String;
  short_description?: String;
  employment_type: String;
  type?: String;
  location?: String;
  salary?: Float;
  requirements?: Json;
}

export interface JobPreviousValuesPromise
  extends Promise<JobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  employment_type: () => Promise<String>;
  type: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Float>;
  requirements: () => Promise<Json>;
}

export interface JobPreviousValuesSubscription
  extends Promise<AsyncIterator<JobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
  company_id: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  short_description: () => Promise<AsyncIterator<String>>;
  employment_type: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  salary: () => Promise<AsyncIterator<Float>>;
  requirements: () => Promise<AsyncIterator<Json>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CvFile {
  id: ID_Output;
  name?: String;
  size?: Int;
  secret?: String;
  contentType?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface CvFilePromise extends Promise<CvFile>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface CvFileSubscription
  extends Promise<AsyncIterator<CvFile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  secret: () => Promise<AsyncIterator<String>>;
  contentType: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface CvFileNullablePromise
  extends Promise<CvFile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  size: () => Promise<Int>;
  secret: () => Promise<String>;
  contentType: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface JobApplicationSubscriptionPayload {
  mutation: MutationType;
  node: JobApplication;
  updatedFields: String[];
  previousValues: JobApplicationPreviousValues;
}

export interface JobApplicationSubscriptionPayloadPromise
  extends Promise<JobApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobApplicationPreviousValuesPromise>() => T;
}

export interface JobApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobApplicationPreviousValuesSubscription>() => T;
}

export interface Notification {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type?: NOTIFICATION_TYPE;
  link?: String;
  readDate?: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<NOTIFICATION_TYPE>;
  user: <T = UserPromise>() => T;
  link: () => Promise<String>;
  readDate: () => Promise<DateTimeOutput>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<NOTIFICATION_TYPE>>;
  user: <T = UserSubscription>() => T;
  link: () => Promise<AsyncIterator<String>>;
  readDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<NOTIFICATION_TYPE>;
  user: <T = UserPromise>() => T;
  link: () => Promise<String>;
  readDate: () => Promise<DateTimeOutput>;
}

export interface JobApplicationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  proposal?: String;
  user_id: String;
}

export interface JobApplicationPreviousValuesPromise
  extends Promise<JobApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  user_id: () => Promise<String>;
}

export interface JobApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<JobApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  proposal: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
}

export interface SavedJobConnection {
  pageInfo: PageInfo;
  edges: SavedJobEdge[];
}

export interface SavedJobConnectionPromise
  extends Promise<SavedJobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SavedJobEdge>>() => T;
  aggregate: <T = AggregateSavedJobPromise>() => T;
}

export interface SavedJobConnectionSubscription
  extends Promise<AsyncIterator<SavedJobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SavedJobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSavedJobSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  first_name?: String;
  last_name?: String;
  dob?: DateTimeOutput;
  home_address?: String;
  utc_number?: String;
  hobbies: Json;
  signup_reason: String;
  uk_citizen: Boolean;
  legal_right: Boolean;
  how_hear: String;
  user_type?: Int;
  languages?: Json;
  education_level?: Json;
  job_title?: String;
  plan_id: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isApproved?: Boolean;
  isRecruiter?: Boolean;
  degree_profile?: Json;
  phonenumber?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  home_address: () => Promise<String>;
  utc_number: () => Promise<String>;
  hobbies: () => Promise<Json>;
  student_confirm: <T = FilePromise>() => T;
  photo_url: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  signup_reason: () => Promise<String>;
  uk_citizen: () => Promise<Boolean>;
  legal_right: () => Promise<Boolean>;
  how_hear: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<Int>;
  languages: () => Promise<Json>;
  education_level: () => Promise<Json>;
  job_title: () => Promise<String>;
  plan_id: () => Promise<String>;
  plan: <T = PlanPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isApproved: () => Promise<Boolean>;
  isRecruiter: () => Promise<Boolean>;
  company: <T = CompanyPromise>() => T;
  degree_profile: () => Promise<Json>;
  phonenumber: () => Promise<String>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  home_address: () => Promise<AsyncIterator<String>>;
  utc_number: () => Promise<AsyncIterator<String>>;
  hobbies: () => Promise<AsyncIterator<Json>>;
  student_confirm: <T = FileSubscription>() => T;
  photo_url: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  signup_reason: () => Promise<AsyncIterator<String>>;
  uk_citizen: () => Promise<AsyncIterator<Boolean>>;
  legal_right: () => Promise<AsyncIterator<Boolean>>;
  how_hear: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<AsyncIterator<Int>>;
  languages: () => Promise<AsyncIterator<Json>>;
  education_level: () => Promise<AsyncIterator<Json>>;
  job_title: () => Promise<AsyncIterator<String>>;
  plan_id: () => Promise<AsyncIterator<String>>;
  plan: <T = PlanSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isApproved: () => Promise<AsyncIterator<Boolean>>;
  isRecruiter: () => Promise<AsyncIterator<Boolean>>;
  company: <T = CompanySubscription>() => T;
  degree_profile: () => Promise<AsyncIterator<Json>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  home_address: () => Promise<String>;
  utc_number: () => Promise<String>;
  hobbies: () => Promise<Json>;
  student_confirm: <T = FilePromise>() => T;
  photo_url: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  signup_reason: () => Promise<String>;
  uk_citizen: () => Promise<Boolean>;
  legal_right: () => Promise<Boolean>;
  how_hear: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<Int>;
  languages: () => Promise<Json>;
  education_level: () => Promise<Json>;
  job_title: () => Promise<String>;
  plan_id: () => Promise<String>;
  plan: <T = PlanPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isApproved: () => Promise<Boolean>;
  isRecruiter: () => Promise<Boolean>;
  company: <T = CompanyPromise>() => T;
  degree_profile: () => Promise<Json>;
  phonenumber: () => Promise<String>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectApplicationEdge {
  node: ProjectApplication;
  cursor: String;
}

export interface ProjectApplicationEdgePromise
  extends Promise<ProjectApplicationEdge>,
    Fragmentable {
  node: <T = ProjectApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectApplicationEdgeSubscription
  extends Promise<AsyncIterator<ProjectApplicationEdge>>,
    Fragmentable {
  node: <T = ProjectApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  deliveredAt?: DateTimeOutput;
  readAt?: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  deliveredAt: () => Promise<DateTimeOutput>;
  readAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliveredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePlan {
  count: Int;
}

export interface AggregatePlanPromise
  extends Promise<AggregatePlan>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlanSubscription
  extends Promise<AsyncIterator<AggregatePlan>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CvDoctor {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  user_id?: String;
}

export interface CvDoctorPromise extends Promise<CvDoctor>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  attachments: <T = FragmentableArray<CvFile>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CvDoctorSubscription
  extends Promise<AsyncIterator<CvDoctor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  attachments: <T = Promise<AsyncIterator<CvFileSubscription>>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface CvDoctorNullablePromise
  extends Promise<CvDoctor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  attachments: <T = FragmentableArray<CvFile>>(args?: {
    where?: CvFileWhereInput;
    orderBy?: CvFileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type?: NOTIFICATION_TYPE;
  link?: String;
  readDate?: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<NOTIFICATION_TYPE>;
  link: () => Promise<String>;
  readDate: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<NOTIFICATION_TYPE>>;
  link: () => Promise<AsyncIterator<String>>;
  readDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Project {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  postedBy_id: String;
  company_id: String;
  title: String;
  description?: String;
  short_description?: String;
  duration?: Int;
  proposed_budget?: Float;
  paid_budget?: Float;
  requirements?: Json;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  duration: () => Promise<Int>;
  proposed_budget: () => Promise<Float>;
  paid_budget: () => Promise<Float>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<Json>;
  applications: <T = FragmentableArray<ProjectApplication>>(args?: {
    where?: ProjectApplicationWhereInput;
    orderBy?: ProjectApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
  company_id: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  company: <T = CompanySubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  short_description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  proposed_budget: () => Promise<AsyncIterator<Float>>;
  paid_budget: () => Promise<AsyncIterator<Float>>;
  attachments: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<AsyncIterator<Json>>;
  applications: <
    T = Promise<AsyncIterator<ProjectApplicationSubscription>>
  >(args?: {
    where?: ProjectApplicationWhereInput;
    orderBy?: ProjectApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  duration: () => Promise<Int>;
  proposed_budget: () => Promise<Float>;
  paid_budget: () => Promise<Float>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<Json>;
  applications: <T = FragmentableArray<ProjectApplication>>(args?: {
    where?: ProjectApplicationWhereInput;
    orderBy?: ProjectApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobApplicationConnection {
  pageInfo: PageInfo;
  edges: JobApplicationEdge[];
}

export interface JobApplicationConnectionPromise
  extends Promise<JobApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobApplicationEdge>>() => T;
  aggregate: <T = AggregateJobApplicationPromise>() => T;
}

export interface JobApplicationConnectionSubscription
  extends Promise<AsyncIterator<JobApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobApplicationSubscription>() => T;
}

export interface PlanSubscriptionPayload {
  mutation: MutationType;
  node: Plan;
  updatedFields: String[];
  previousValues: PlanPreviousValues;
}

export interface PlanSubscriptionPayloadPromise
  extends Promise<PlanSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlanPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlanPreviousValuesPromise>() => T;
}

export interface PlanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlanSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlanPreviousValuesSubscription>() => T;
}

export interface JobApplication {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  proposal?: String;
  user_id: String;
}

export interface JobApplicationPromise
  extends Promise<JobApplication>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface JobApplicationSubscription
  extends Promise<AsyncIterator<JobApplication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  proposal: () => Promise<AsyncIterator<String>>;
  attachments: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface JobApplicationNullablePromise
  extends Promise<JobApplication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface PlanPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  price?: Int;
  description?: String;
  category: Int;
}

export interface PlanPreviousValuesPromise
  extends Promise<PlanPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  description: () => Promise<String>;
  category: () => Promise<Int>;
}

export interface PlanPreviousValuesSubscription
  extends Promise<AsyncIterator<PlanPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Int>>;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSavedJob {
  count: Int;
}

export interface AggregateSavedJobPromise
  extends Promise<AggregateSavedJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSavedJobSubscription
  extends Promise<AsyncIterator<AggregateSavedJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content?: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PlanConnection {
  pageInfo: PageInfo;
  edges: PlanEdge[];
}

export interface PlanConnectionPromise
  extends Promise<PlanConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlanEdge>>() => T;
  aggregate: <T = AggregatePlanPromise>() => T;
}

export interface PlanConnectionSubscription
  extends Promise<AsyncIterator<PlanConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlanEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlanSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectApplication {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  proposal?: String;
  user_id: String;
  proposed_budget?: Float;
  proposed_duration?: String;
}

export interface ProjectApplicationPromise
  extends Promise<ProjectApplication>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
  proposed_budget: () => Promise<Float>;
  proposed_duration: () => Promise<String>;
}

export interface ProjectApplicationSubscription
  extends Promise<AsyncIterator<ProjectApplication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  proposal: () => Promise<AsyncIterator<String>>;
  attachments: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  proposed_budget: () => Promise<AsyncIterator<Float>>;
  proposed_duration: () => Promise<AsyncIterator<String>>;
}

export interface ProjectApplicationNullablePromise
  extends Promise<ProjectApplication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
  proposed_budget: () => Promise<Float>;
  proposed_duration: () => Promise<String>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface JobEdge {
  node: Job;
  cursor: String;
}

export interface JobEdgePromise extends Promise<JobEdge>, Fragmentable {
  node: <T = JobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobEdgeSubscription
  extends Promise<AsyncIterator<JobEdge>>,
    Fragmentable {
  node: <T = JobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  postedBy_id: String;
  company_id: String;
  title: String;
  description?: String;
  short_description?: String;
  duration?: Int;
  proposed_budget?: Float;
  paid_budget?: Float;
  requirements?: Json;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  duration: () => Promise<Int>;
  proposed_budget: () => Promise<Float>;
  paid_budget: () => Promise<Float>;
  requirements: () => Promise<Json>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
  company_id: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  short_description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  proposed_budget: () => Promise<AsyncIterator<Float>>;
  paid_budget: () => Promise<AsyncIterator<Float>>;
  requirements: () => Promise<AsyncIterator<Json>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SavedJobPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  job_id?: String;
  user_id?: String;
}

export interface SavedJobPreviousValuesPromise
  extends Promise<SavedJobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  job_id: () => Promise<String>;
  user_id: () => Promise<String>;
}

export interface SavedJobPreviousValuesSubscription
  extends Promise<AsyncIterator<SavedJobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  job_id: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
}

export interface ProjectApplicationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  proposal?: String;
  user_id: String;
  proposed_budget?: Float;
  proposed_duration?: String;
}

export interface ProjectApplicationPreviousValuesPromise
  extends Promise<ProjectApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  proposal: () => Promise<String>;
  user_id: () => Promise<String>;
  proposed_budget: () => Promise<Float>;
  proposed_duration: () => Promise<String>;
}

export interface ProjectApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  proposal: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
  proposed_budget: () => Promise<AsyncIterator<Float>>;
  proposed_duration: () => Promise<AsyncIterator<String>>;
}

export interface ProjectApplicationSubscriptionPayload {
  mutation: MutationType;
  node: ProjectApplication;
  updatedFields: String[];
  previousValues: ProjectApplicationPreviousValues;
}

export interface ProjectApplicationSubscriptionPayloadPromise
  extends Promise<ProjectApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectApplicationPreviousValuesPromise>() => T;
}

export interface ProjectApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectApplicationPreviousValuesSubscription>() => T;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SavedJob {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  job_id?: String;
  user_id?: String;
}

export interface SavedJobPromise extends Promise<SavedJob>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  job_id: () => Promise<String>;
  job: <T = JobPromise>() => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface SavedJobSubscription
  extends Promise<AsyncIterator<SavedJob>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  job_id: () => Promise<AsyncIterator<String>>;
  job: <T = JobSubscription>() => T;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface SavedJobNullablePromise
  extends Promise<SavedJob | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  job_id: () => Promise<String>;
  job: <T = JobPromise>() => T;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface Job {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  postedBy_id: String;
  company_id: String;
  title: String;
  description?: String;
  short_description?: String;
  employment_type: String;
  type?: String;
  location?: String;
  salary?: Float;
  requirements?: Json;
}

export interface JobPromise extends Promise<Job>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  employment_type: () => Promise<String>;
  type: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Float>;
  applications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<Json>;
}

export interface JobSubscription
  extends Promise<AsyncIterator<Job>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy_id: () => Promise<AsyncIterator<String>>;
  company_id: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  company: <T = CompanySubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  short_description: () => Promise<AsyncIterator<String>>;
  employment_type: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  salary: () => Promise<AsyncIterator<Float>>;
  applications: <
    T = Promise<AsyncIterator<JobApplicationSubscription>>
  >(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attachments: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<AsyncIterator<Json>>;
}

export interface JobNullablePromise extends Promise<Job | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy_id: () => Promise<String>;
  company_id: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  short_description: () => Promise<String>;
  employment_type: () => Promise<String>;
  type: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Float>;
  applications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attachments: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requirements: () => Promise<Json>;
}

export interface AggregateJobApplication {
  count: Int;
}

export interface AggregateJobApplicationPromise
  extends Promise<AggregateJobApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobApplicationSubscription
  extends Promise<AsyncIterator<AggregateJobApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Json = any;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Plan",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Job",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "JobApplication",
    embedded: false
  },
  {
    name: "ProjectApplication",
    embedded: false
  },
  {
    name: "SavedJob",
    embedded: false
  },
  {
    name: "SavedProject",
    embedded: false
  },
  {
    name: "CvDoctor",
    embedded: false
  },
  {
    name: "CvDoctorReply",
    embedded: false
  },
  {
    name: "CvFile",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "NOTIFICATION_TYPE",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
